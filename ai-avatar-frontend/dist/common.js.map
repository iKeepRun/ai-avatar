{"version":3,"file":"common.js","mappings":";;;;;;;;;;;AACA;AACA;AAAA;AAOA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAEA;;;;;;;;;;;;;ACzBA;AAEA;AAAA;AAWA;AAOA;AALA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AAEA;;;;;;;;;;;;;;;;;ACpCA;;;;;;;;;;;;;;;;ACAA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AAEA;;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AANA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AATA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAJA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAJA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAQA;;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://ai-avatar-frontend/._src_components_ColorPicker_index.tsx","webpack://ai-avatar-frontend/._src_components_StyleCard_index.tsx","webpack://ai-avatar-frontend/._src_components_index.ts","webpack://ai-avatar-frontend/._src_constants_config.ts","webpack://ai-avatar-frontend/._src_services_api.ts"],"sourcesContent":["import { FC } from 'react'\r\nimport { View } from '@tarojs/components'\r\nimport './index.scss'\r\n\r\ninterface Props {\r\n  color: string\r\n  onChange: (color: string) => void\r\n}\r\n\r\nconst ColorPicker: FC<Props> = ({ color, onChange }) => {\r\n  return (\r\n    <View className='color-picker'>\r\n      <View \r\n        className='color-preview'\r\n        style={{ backgroundColor: color }}\r\n        onClick={() => {\r\n          // 这里应该打开颜色选择器，但微信小程序没有原生的颜色选择器\r\n          // 可以考虑使用第三方组件或自定义实现\r\n          onChange('#000000')\r\n        }}\r\n      />\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default ColorPicker ","import { View, Image, Text } from '@tarojs/components'\r\nimport { FC } from 'react'\r\nimport './index.scss'\r\n\r\ninterface StyleCardProps {\r\n  id: string\r\n  name: string\r\n  image: string\r\n  isVip?: boolean\r\n  selected?: boolean\r\n  onClick?: () => void\r\n}\r\n\r\nconst StyleCard: FC<StyleCardProps> = ({\r\n  id,\r\n  name,\r\n  image,\r\n  isVip = false,\r\n  selected = false,\r\n  onClick\r\n}) => {\r\n  return (\r\n    <View className={`style-card ${selected ? 'selected' : ''}`} onClick={onClick}>\r\n      <Image className='style-image' src={image} mode='aspectFill' />\r\n      <View className='style-info'>\r\n        <Text className='style-name'>{name}</Text>\r\n        {isVip && (\r\n          <View className='vip-tag'>\r\n            <Text className='vip-text'>VIP</Text>\r\n          </View>\r\n        )}\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default StyleCard ","export { default as ColorPicker } from './ColorPicker'\r\nexport { default as StyleCard } from './StyleCard' ","export const API_BASE_URL = process.env.NODE_ENV === 'development' \r\n  ? 'http://localhost:8080'\r\n  : 'https://api.example.com';\r\n\r\nexport const BASE_URL = API_BASE_URL;\r\n\r\nexport const UPLOAD_URL = `${API_BASE_URL}/api/v1/upload`;\r\n\r\nexport const MEMBER_TYPES = {\r\n  MONTHLY: 1,\r\n  YEARLY: 2\r\n} as const;\r\n\r\nexport const AVATAR_STATUS = {\r\n  PENDING: 0,\r\n  COMPLETED: 1,\r\n  FAILED: 2\r\n} as const; ","import Taro from '@tarojs/taro'\r\nimport { UserInfo, MemberInfo, AvatarResponse } from './types'\r\nimport { BASE_URL } from '../constants/config'\r\n\r\n// 用户相关接口\r\nexport const userApi = {\r\n  login: (code: string) => \r\n    Taro.request({\r\n      url: `${BASE_URL}/api/v1/users/login`,\r\n      method: 'POST',\r\n      data: { code }\r\n    }),\r\n\r\n  getProfile: () => \r\n    Taro.request<UserInfo>({\r\n      url: `${BASE_URL}/api/v1/users/profile`,\r\n      header: {\r\n        'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n      }\r\n    })\r\n}\r\n\r\n// 头像生成相关接口\r\nexport const avatarApi = {\r\n  uploadImage: (filePath: string) => \r\n    Taro.uploadFile({\r\n      url: `${BASE_URL}/api/v1/upload`,\r\n      filePath,\r\n      name: 'file',\r\n      header: {\r\n        'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n      }\r\n    }),\r\n\r\n  updateStyle: (imageId: string, styleId: string) =>\r\n    Taro.request({\r\n      url: `${BASE_URL}/api/v1/avatar/style`,\r\n      method: 'POST',\r\n      data: {\r\n        imageId,\r\n        styleId\r\n      },\r\n      header: {\r\n        'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n      }\r\n    }),\r\n\r\n  getResult: async (taskId: string): Promise<AvatarResponse> => {\r\n    const res = await Taro.request({\r\n      url: `${BASE_URL}/api/v1/avatar/result/${taskId}`,\r\n      method: 'GET',\r\n      header: {\r\n        'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n      }\r\n    })\r\n    return res.data\r\n  },\r\n\r\n  updateParams: async (taskId: string, params: any): Promise<AvatarResponse> => {\r\n    const res = await Taro.request({\r\n      url: `${BASE_URL}/api/avatar/${taskId}/params`,\r\n      method: 'PUT',\r\n      data: params\r\n    })\r\n    return res.data\r\n  },\r\n\r\n  generate: async (taskId: string, params: any): Promise<AvatarResponse> => {\r\n    const res = await Taro.request({\r\n      url: `${BASE_URL}/api/avatar/${taskId}/generate`,\r\n      method: 'POST',\r\n      data: params\r\n    })\r\n    return res.data\r\n  }\r\n}\r\n\r\n// 会员相关接口\r\nexport const memberApi = {\r\n  getMemberInfo: () =>\r\n    Taro.request<MemberInfo>({\r\n      url: `${BASE_URL}/api/v1/members/info`,\r\n      header: {\r\n        'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n      }\r\n    }),\r\n\r\n  subscribe: (memberType: number) =>\r\n    Taro.request({\r\n      url: `${BASE_URL}/api/v1/members/subscribe`,\r\n      method: 'POST',\r\n      data: { memberType },\r\n      header: {\r\n        'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n      }\r\n    })\r\n}\r\n\r\n// 上传图片\r\nexport const uploadImage = (filePath: string) => {\r\n  return Taro.uploadFile({\r\n    url: `${BASE_URL}/api/v1/upload`,\r\n    filePath,\r\n    name: 'file',\r\n    header: {\r\n      'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n    }\r\n  })\r\n}\r\n\r\n// 更新风格\r\nexport const updateStyle = (imageId: string, styleId: string) => {\r\n  return Taro.request({\r\n    url: `${BASE_URL}/api/v1/avatar/style`,\r\n    method: 'POST',\r\n    data: {\r\n      imageId,\r\n      styleId\r\n    },\r\n    header: {\r\n      'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n    }\r\n  })\r\n}\r\n\r\n// 生成头像\r\nexport const generateAvatar = (imageId: string) => {\r\n  return Taro.request({\r\n    url: `${BASE_URL}/api/v1/avatar/generate`,\r\n    method: 'POST',\r\n    data: {\r\n      imageId\r\n    },\r\n    header: {\r\n      'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n    }\r\n  })\r\n}\r\n\r\n// 获取生成结果\r\nexport const getAvatarResult = (taskId: string) => {\r\n  return Taro.request({\r\n    url: `${BASE_URL}/api/v1/avatar/result/${taskId}`,\r\n    method: 'GET',\r\n    header: {\r\n      'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n    }\r\n  })\r\n} "],"names":[],"sourceRoot":""}