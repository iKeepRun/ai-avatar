{"version":3,"file":"common.js","mappings":";;;;;;;;;;;;;AAAA;AACA;;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAJA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAJA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AANA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AATA;AAAA;AAAA;AAAA;AAUA;;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC/KA;AAAA;AAUA;AAAA;AAAA;AAPA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACXA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAGA","sources":["webpack://ai-avatar-frontend/._src_constants_config.ts","webpack://ai-avatar-frontend/._src_services_api.ts","webpack://ai-avatar-frontend/._src_stores_avatar.ts","webpack://ai-avatar-frontend/._src_stores_index.ts","webpack://ai-avatar-frontend/._src_stores_user.ts"],"sourcesContent":["export const BASE_URL = process.env.NODE_ENV === 'development' \r\n  ? 'http://192.168.1.12:8080'  // 开发环境，使用HTTPS\r\n  : 'https://api.example.com';  // 生产环境\r\n\r\nexport const UPLOAD_URL = `${BASE_URL}/api/v1/upload`;\r\n\r\nexport const MEMBER_TYPES = {\r\n  MONTHLY: 1,\r\n  YEARLY: 2\r\n} as const;\r\n\r\nexport const AVATAR_STATUS = {\r\n  PENDING: 0,\r\n  COMPLETED: 1,\r\n  FAILED: 2\r\n} as const; ","import Taro from '@tarojs/taro'\r\nimport { UserInfo, MemberInfo, AvatarResponse } from './types'\r\nimport { BASE_URL } from '../constants/config'\r\n\r\n// 用户相关接口\r\nexport const userApi = {\r\n  login: (data: { code: string; avatarUrl?: string; nickName?: string }) => {\r\n    console.log('开始登录请求:', {\r\n      url: `${BASE_URL}/api/v1/users/login`,\r\n      data\r\n    });\r\n    \r\n    return Taro.request({\r\n      url: `${BASE_URL}/api/v1/users/login`,\r\n      method: 'POST',\r\n      data: {\r\n        code: data.code,\r\n        avatarUrl: data.avatarUrl,\r\n        nickName: data.nickName\r\n      },\r\n      timeout: 60000,  // 增加到60秒\r\n      enableHttp2: false,\r\n      enableQuic: false,\r\n      enableCache: false,\r\n      header: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => {\r\n      console.log('登录响应:', res);\r\n      return res;\r\n    }).catch(err => {\r\n      console.error('登录请求失败:', {\r\n        error: err,\r\n        errorMessage: err.errMsg,\r\n        requestTask: err.requestTask\r\n      });\r\n      throw err;\r\n    });\r\n  },\r\n\r\n  getProfile: () => \r\n    Taro.request<UserInfo>({\r\n      url: `${BASE_URL}/api/v1/users/profile`,\r\n      header: {\r\n        'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n      }\r\n    })\r\n}\r\n\r\n// 头像生成相关接口\r\nexport const avatarApi = {\r\n  uploadImage: (filePath: string) => \r\n    Taro.uploadFile({\r\n      url: `${BASE_URL}/api/v1/upload`,\r\n      filePath,\r\n      name: 'file',\r\n      header: {\r\n        'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n      }\r\n    }),\r\n\r\n  updateStyle: (imageId: string, styleId: string) =>\r\n    Taro.request({\r\n      url: `${BASE_URL}/api/v1/avatar/style`,\r\n      method: 'POST',\r\n      data: {\r\n        imageId,\r\n        styleId\r\n      },\r\n      header: {\r\n        'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n      }\r\n    }),\r\n\r\n\r\n  updateParams: async (taskId: string, params: any): Promise<AvatarResponse> => {\r\n    const res = await Taro.request({\r\n      url: `${BASE_URL}/api/avatar/${taskId}/params`,\r\n      method: 'PUT',\r\n      data: params\r\n    })\r\n    return res.data\r\n  },\r\n\r\n  generate: async (taskId: string, params: any): Promise<AvatarResponse> => {\r\n    const res = await Taro.request({\r\n      url: `${BASE_URL}/api/avatar/${taskId}/generate`,\r\n      method: 'POST',\r\n      data: params\r\n    })\r\n    return res.data\r\n  },\r\n  \r\n  getTaskResult: async (taskId: string): Promise<AvatarResponse> => {\r\n    const res = await Taro.request({\r\n      url: `${BASE_URL}/api/v1/avatars/result/${taskId}`,\r\n      method: 'GET',\r\n      header: {\r\n        'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n      }\r\n    })\r\n    return res.data\r\n  },\r\n}\r\n\r\n// 会员相关接口\r\nexport const memberApi = {\r\n  getMemberInfo: () =>\r\n    Taro.request<MemberInfo>({\r\n      url: `${BASE_URL}/api/v1/members/info`,\r\n      header: {\r\n        'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n      }\r\n    }),\r\n\r\n  subscribe: (memberType: number) =>\r\n    Taro.request({\r\n      url: `${BASE_URL}/api/v1/members/subscribe`,\r\n      method: 'POST',\r\n      data: { memberType },\r\n      header: {\r\n        'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n      }\r\n    })\r\n}\r\n\r\n// 上传图片\r\nexport const uploadImage = (filePath: string) => {\r\n  return Taro.uploadFile({\r\n    url: `${BASE_URL}/api/v1/avatars/upload`,\r\n    filePath,\r\n    name: 'file',\r\n    header: {\r\n      'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n    }\r\n  })\r\n}\r\n\r\n// 更新风格\r\nexport const updateStyle = (imageId: string, styleId: string) => {\r\n  return Taro.request({\r\n    url: `${BASE_URL}/api/v1/avatars/style`,\r\n    method: 'POST',\r\n    data: {\r\n      imageId,\r\n      styleId\r\n    },\r\n    header: {\r\n      'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n    }\r\n  })\r\n}\r\n\r\n// 生成头像\r\nexport const generateAvatar = (url: string,styleType: string) => {\r\n  return Taro.request({\r\n    url: `${BASE_URL}/api/v1/avatars/generate`,\r\n    method: 'POST',\r\n    header: {\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n      'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n    },\r\n    data: `url=${encodeURIComponent(url)}&styleType=${encodeURIComponent(styleType)}`\r\n  })\r\n}\r\n\r\n// 获取生成结果\r\nexport const getAvatarResult = (taskId: string) => {\r\n  return Taro.request({\r\n    url: `${BASE_URL}/api/v1/avatar/result/${taskId}`,\r\n    method: 'GET',\r\n    header: {\r\n      'Authorization': `Bearer ${Taro.getStorageSync('token')}`\r\n    }\r\n  })\r\n} ","import { makeAutoObservable } from 'mobx'\r\n\r\nclass AvatarStore {\r\n  taskId: string = ''\r\n  originalImage: string = ''\r\n  previewImage: string = ''\r\n  currentStyle: string = '' \r\n  taskStatus: string = ''\r\n  cosImageUrl: string = ''\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  setTaskId(id: string) {\r\n    this.taskId = id\r\n  }\r\n\r\n  setOriginalImage(url: string) {\r\n    this.originalImage = url\r\n  }\r\n\r\n  setPreviewImage(url: string) {\r\n    this.previewImage = url\r\n  }\r\n\r\n  setCurrentStyle(style: string) {\r\n    this.currentStyle = style\r\n  }\r\n  // 更新任务状态\r\n  updateTaskStatus(status: string) {\r\n    this.taskStatus = status\r\n  }\r\n  setCosImageUrl(url: string) {\r\n    this.cosImageUrl = url\r\n  }\r\n}\r\n\r\nexport default AvatarStore ","import { createContext, useContext } from 'react'\r\nimport AvatarStore from './avatar'   \r\nimport UserStore from './user' \r\n\r\nexport const stores = {\r\n  avatarStore: new AvatarStore(),\r\n  userStore: new UserStore()\r\n}\r\n\r\nexport const StoreContext = createContext(stores)\r\n\r\nexport const useStore = () => useContext(StoreContext)","import { makeAutoObservable } from 'mobx'\r\n\r\nclass UserStore {\r\n  isVip: boolean = false\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  setIsVip(vip: boolean) {\r\n    this.isVip = vip\r\n  }\r\n}\r\n\r\nexport default UserStore"],"names":[],"sourceRoot":""}