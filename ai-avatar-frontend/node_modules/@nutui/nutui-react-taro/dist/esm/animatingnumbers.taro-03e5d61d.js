import React__default, { useRef, useState, useEffect, Component } from 'react';
import { createSelectorQuery } from '@tarojs/taro';
import { c as cn } from './bem-350c1702.js';

const defaultProps$1 = {
    maxLen: 0,
    endNumber: '',
    delaySpeed: 300,
    easeSpeed: 1,
    thousands: false,
    className: '',
};
const CountUp = (props) => {
    const { maxLen, endNumber, delaySpeed, easeSpeed, className, thousands, ...reset } = {
        ...defaultProps$1,
        ...props,
    };
    const b = cn('countup');
    const countupRef = useRef(null);
    const timerRef = useRef(0);
    const numbers = Array.from({ length: 10 }, (v, i) => i);
    const getShowNumber = () => {
        const splitArr = endNumber.split('.');
        const intNumber = maxLen && splitArr[0].length < maxLen
            ? (Array(maxLen).join('0') + splitArr[0]).slice(-maxLen)
            : splitArr[0];
        const currNumber = `${thousands ? intNumber.replace(/(\d)(?=(?:\d{3})+$)/g, '$1,') : intNumber}${splitArr[1] ? '.' : ''}${splitArr[1] || ''}`;
        return currNumber.split('');
    };
    const [numerArr, setNumerArr] = useState([]);
    const [transformArr, setTransformArr] = useState([]);
    const isLoaded = useRef(false);
    const setNumberTransform = () => {
        if (countupRef.current && numerArr.length) {
            createSelectorQuery()
                .selectAll('.nut-countup__listitem')
                .node((numberItems) => {
                const transformArrCache = [];
                Object.keys(numberItems).forEach((key) => {
                    const elem = numberItems[Number(key)];
                    const idx = Number(numerArr[Number(key)]);
                    if (elem) {
                        // 计算规则：父元素和实际列表高度的百分比，分割成20等份
                        const transform = idx || idx === 0
                            ? `translate(0, -${(idx === 0 ? 10 : idx) * 5}%)`
                            : '';
                        transformArrCache.push(transform);
                    }
                });
                setTransformArr([...transformArrCache]);
            })
                .exec();
        }
    };
    const numberEaseStyle = (idx) => {
        return {
            transition: `transform ${easeSpeed}s ease-in-out`,
            transform: transformArr[idx] ? transformArr[idx] : null,
        };
    };
    useEffect(() => {
        setNumberTransform();
    }, [numerArr]);
    useEffect(() => {
        if (!isLoaded.current) {
            isLoaded.current = true;
            timerRef.current = window.setTimeout(() => {
                setNumerArr(getShowNumber());
            }, delaySpeed);
        }
        else {
            setNumerArr(getShowNumber());
        }
        return () => {
            window.clearTimeout(timerRef.current);
        };
    }, [endNumber]);
    return (React__default.createElement("div", { className: `${b()} ${className}`, ref: countupRef },
        React__default.createElement("ul", { className: b('list') }, numerArr.map((item, idx) => {
            return (React__default.createElement("li", { className: `${b('listitem', {
                    number: !Number.isNaN(Number(item)),
                })}`, key: idx }, !Number.isNaN(Number(item)) ? (React__default.createElement("span", { className: b('number'), style: numberEaseStyle(idx) }, [...numbers, ...numbers].map((number, subidx) => {
                return React__default.createElement("span", { key: subidx }, number);
            }))) : (React__default.createElement("span", { className: b('separator') }, item))));
        }))));
};
CountUp.defaultProps = defaultProps$1;
CountUp.displayName = 'NutCountUp';

const defaultProps = {};
class AnimatingNumbers extends Component {
    static defaultProps = defaultProps;
    static displayName = 'NutAnimatingNumbers';
    static CountUp = CountUp;
    constructor(props) {
        super(props);
        this.state = {};
    }
    render() {
        return React__default.createElement("div", { className: "nut-animatingnumbers" });
    }
}

export { AnimatingNumbers as A };
