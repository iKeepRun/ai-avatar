import React__default, { useState, useRef } from 'react';
import { createInnerAudioContext } from '@tarojs/taro';
import { I as Icon } from './icon.taro-296a1bec.js';
import { R as Range } from './range.taro-5ab0e79e.js';
import { B as Button } from './button.taro-9244d065.js';
import { c as cn } from './bem-350c1702.js';
import { u as useConfig } from './configprovider.taro-8d71eb49.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';

const b = cn('audio');
const warn = console.warn;
const defaultProps = {
    ...ComponentDefaults,
    className: '',
    url: '',
    style: {},
    autoplay: false,
    loop: false,
    type: 'progress',
    onFastBack: (ctx) => { },
    onForward: (ctx) => { },
    onPause: (ctx) => { },
    onPlay: (ctx) => { },
    onPlayEnd: (ctx) => { },
    onCanPlay: (ctx) => { },
};
const Audio = (props) => {
    const { locale } = useConfig();
    const { className, url, style, autoplay, loop, type, onFastBack, onForward, onPause, onPlay, onPlayEnd, onCanPlay, children, iconClassPrefix, iconFontClassName, ...rest } = {
        ...defaultProps,
        ...props,
    };
    const [playing, setPlaying] = useState(false);
    const [totalSeconds, setTotalSeconds] = useState(0);
    const [percent, setPercent] = useState(0);
    const [isCanPlay, setIsCanPlay] = useState(false);
    const [currentDuration, setCurrentDuration] = useState('00:00:00');
    const statusRef = useRef({
        currentTime: 0,
        currentDuration: '00:00:00',
        percent: 0,
    });
    const audioRef = useRef(createInnerAudioContext());
    const audioCtx = audioRef.current;
    audioCtx.src = url;
    audioCtx.autoplay = autoplay || false;
    audioCtx.loop = loop || false;
    audioCtx.onPause(() => {
        props.onPause && props.onPause(audioCtx);
    });
    audioCtx.onEnded(() => {
        if (props.loop) {
            warn(locale.audio.tips || 'onPlayEnd事件在loop=false时才会触发');
        }
        else {
            props.onPlayEnd && props.onPlayEnd(audioCtx);
        }
    });
    audioCtx.onPlay(() => {
        const { duration } = audioCtx;
        setTotalSeconds(Math.floor(duration));
        props.onPlay && props.onPlay(audioCtx);
    });
    audioCtx.onCanplay(() => {
        const intervalID = setInterval(function () {
            if (audioCtx.duration !== 0) {
                setTotalSeconds(audioCtx.duration);
                clearInterval(intervalID);
            }
        }, 500);
        setIsCanPlay(true);
        props.onCanPlay && props.onCanPlay(audioCtx);
    });
    audioCtx.onTimeUpdate(() => {
        const time = parseInt(`${audioCtx.currentTime}`);
        const formated = formatSeconds(`${time}`);
        statusRef.current.currentDuration = formated;
        setPercent((time / totalSeconds) * 100);
        setCurrentDuration(formatSeconds(audioCtx.currentTime.toString()));
    });
    audioCtx.onError((res) => {
        console.log('code', res.errCode);
        console.log('message', res.errMsg);
    });
    function formatSeconds(value) {
        if (!value) {
            return '00:00:00';
        }
        const time = parseInt(value);
        const hours = Math.floor(time / 3600);
        const minutes = Math.floor((time - hours * 3600) / 60);
        const secondss = time - hours * 3600 - minutes * 60;
        let result = '';
        result += `${`0${hours.toString()}`.slice(-2)}:`;
        result += `${`0${minutes.toString()}`.slice(-2)}:`;
        result += `0${secondss.toString()}`.slice(-2);
        return result;
    }
    const handleBack = () => {
        const currentTime = Math.floor(audioCtx.currentTime);
        statusRef.current.currentTime = Math.max(currentTime - 1, 0);
        setCurrentDuration(formatSeconds(statusRef.current.currentTime.toString()));
        audioCtx.seek(statusRef.current.currentTime);
        props.onFastBack && props.onFastBack(audioCtx);
    };
    const handleForward = () => {
        const currentTime = Math.floor(audioCtx.currentTime);
        statusRef.current.currentTime = Math.min(currentTime + 1, audioCtx.duration);
        setCurrentDuration(formatSeconds(statusRef.current.currentTime.toString()));
        audioCtx.seek(statusRef.current.currentTime);
        props.onForward && props.onForward(audioCtx);
    };
    const handleStatusChange = () => {
        setPlaying(!playing);
        if (!playing) {
            audioCtx.play();
        }
        else {
            audioCtx.pause();
        }
    };
    const renderIcon = () => {
        return (React__default.createElement(React__default.Fragment, null,
            React__default.createElement("div", { className: b('icon') },
                React__default.createElement("div", { className: `${b('icon-box')} ${playing ? b('icon-play') : b('icon-stop')}`, onClick: handleStatusChange }, playing ? (React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, name: "service", className: "nut-icon-loading" })) : (React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, name: "service" }))))));
    };
    const renderProgerss = () => {
        return (React__default.createElement(React__default.Fragment, null,
            React__default.createElement("div", { className: b('progress') },
                React__default.createElement("div", { className: "time" }, currentDuration),
                React__default.createElement("div", { className: b('progress-bar-wrapper') },
                    React__default.createElement(Range, { modelValue: percent, hiddenTag: true, hiddenRange: true, "inactive-color": "#cccccc", "active-color": "#fa2c19" })),
                React__default.createElement("div", { className: "time" }, formatSeconds(`${totalSeconds}`) || '00:00:00')),
            React__default.createElement("div", { className: isCanPlay ? 'custom-button-group' : 'custom-button-group-disable' },
                React__default.createElement(Button, { type: "primary", size: "small", className: "back", onClick: handleBack }, locale.audio.back || '快退'),
                React__default.createElement(Button, { type: "primary", size: "small", className: "start", onClick: handleStatusChange }, playing
                    ? `${locale.audio.pause || '暂停'}`
                    : `${locale.audio.start || '开始'}`),
                React__default.createElement(Button, { type: "primary", size: "small", onClick: handleForward }, locale.audio.forward || '快进'))));
    };
    const renderNone = () => {
        return (React__default.createElement("div", { className: b('none-container'), onClick: handleStatusChange }, children));
    };
    const renderAudio = () => {
        switch (type) {
            case 'icon':
                return renderIcon();
            case 'progress':
                return renderProgerss();
            case 'none':
                return renderNone();
            default:
                return null;
        }
    };
    return (React__default.createElement("div", { className: `${b()} ${className}`, style: style, ...rest }, renderAudio()));
};
Audio.defaultProps = defaultProps;
Audio.displayName = 'NutAudio';

export { Audio as A };
