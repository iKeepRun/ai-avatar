import React__default, { useState, useRef, useContext, useEffect } from 'react';
import classNames from 'classnames';
import { Image } from '@tarojs/components';
import { A as AvatarContext } from './AvatarContext-c96afdcc.js';
import { c as cn } from './bem-350c1702.js';
import { I as Icon } from './icon.taro-296a1bec.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';

const defaultProps = {
    ...ComponentDefaults,
    size: '',
    icon: '',
    iconSize: '',
    bgColor: '#eee',
    color: '#666',
    prefixCls: 'nut-avatar',
    url: '',
};
const Avatar = (props) => {
    const { children, prefixCls, size, shape, bgColor, color, url, icon, iconSize, className, style, activeAvatar, onActiveAvatar, onError, iconClassPrefix, iconFontClassName, ...rest } = {
        ...defaultProps,
        ...props,
    };
    const [maxSum, setMaxSum] = useState(0); // avatarGroup里的avatar的个数
    const [showMax, setShowMax] = useState(false); // 是否显示的最大头像个数
    const [avatarIndex, setAvatarIndex] = useState(1); // avatar的索引
    const avatarRef = useRef(null);
    const parent = useContext(AvatarContext);
    const b = cn('avatar');
    const classes = classNames({
        [`nut-avatar-${size || parent?.propAvatarGroup?.size || 'normal'}`]: true,
        [`nut-avatar-${shape || parent?.propAvatarGroup?.shape || 'round'}`]: true,
    });
    const cls = classNames(b(''), classes, className);
    const sizeValue = ['large', 'normal', 'small'];
    const styles = {
        width: sizeValue.indexOf(size) > -1 ? '' : `${size}px`,
        height: sizeValue.indexOf(size) > -1 ? '' : `${size}px`,
        backgroundColor: `${bgColor}`,
        color: `${color}`,
        marginLeft: avatarIndex !== 1 && parent?.propAvatarGroup?.span
            ? `${parent?.propAvatarGroup?.span}px`
            : '',
        zIndex: parent?.propAvatarGroup?.zIndex === 'right'
            ? `${Math.abs(maxSum - avatarIndex)}`
            : '',
        ...style,
    };
    const maxStyles = {
        backgroundColor: `${parent?.propAvatarGroup?.maxBgColor}`,
        color: `${parent?.propAvatarGroup?.maxColor}`,
    };
    const iconStyles = icon || '';
    useEffect(() => {
        const avatarChildren = parent?.avatarGroupRef?.current.children;
        if (avatarChildren) {
            avatarLength(avatarChildren);
        }
    }, []);
    const avatarLength = (children) => {
        for (let i = 0; i < children.length; i++) {
            if (children[i] &&
                children[i].classList &&
                (children[i].classList[0] === 'nut-avatar' ||
                    children[i].classList.values().next().value === 'nut-avatar')) {
                children[i].setAttribute('data-index', i + 1);
            }
        }
        const index = avatarRef?.current?.dataset?.index;
        const maxCount = parent?.propAvatarGroup?.maxCount;
        setMaxSum(children.length);
        setAvatarIndex(index);
        if (index === children.length &&
            index !== maxCount &&
            children.length > maxCount) {
            setShowMax(true);
        }
    };
    const errorEvent = (e) => {
        if (props.onError) {
            props.onError(e);
        }
    };
    const clickAvatar = (e) => {
        activeAvatar && activeAvatar(e);
        onActiveAvatar && onActiveAvatar(e);
    };
    return (React__default.createElement(React__default.Fragment, null, (showMax ||
        !parent?.propAvatarGroup?.maxCount ||
        avatarIndex <= parent?.propAvatarGroup?.maxCount) && (React__default.createElement("div", { className: cls, ...rest, style: !showMax ? styles : maxStyles, onClick: clickAvatar, ref: avatarRef },
        (!parent?.propAvatarGroup?.maxCount ||
            avatarIndex <= parent?.propAvatarGroup?.maxCount) && (React__default.createElement(React__default.Fragment, null,
            url && (React__default.createElement(Image, { className: "avatar-img", src: url, onError: errorEvent })),
            icon && (React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, className: "icon", name: iconStyles, size: iconSize })),
            children && React__default.createElement("span", { className: "text" }, children))),
        showMax && (React__default.createElement("div", { className: "text" }, parent?.propAvatarGroup?.maxContent
            ? parent?.propAvatarGroup?.maxContent
            : `+ ${avatarIndex - parent?.propAvatarGroup?.maxCount}`))))));
};
Avatar.defaultProps = defaultProps;
Avatar.displayName = 'NutAvatar';

export { Avatar as A };
