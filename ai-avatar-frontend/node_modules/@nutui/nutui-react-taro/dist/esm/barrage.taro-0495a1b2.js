import React__default, { useState, useRef, useImperativeHandle, useEffect } from 'react';
import { createSelectorQuery } from '@tarojs/taro';
import classNames from 'classnames';
import { c as cn } from './bem-350c1702.js';

const defaultProps = {
    barrageList: [],
    frequency: 500,
    loop: true,
    speeds: 3000,
    rows: 3,
    top: 10,
};
const InternalBarrage = (props, ref) => {
    const { className, frequency, loop, barrageList, speeds, rows, top, ...restProps } = {
        ...defaultProps,
        ...props,
    };
    const [styleList, setStyleList] = useState([]);
    const [baItemList, setBaItemList] = useState(barrageList);
    const barrageListSet = useRef(barrageList);
    const barrageBody = useRef(null);
    const barrageContainer = useRef(null);
    const timeId = useRef(new Date().getTime());
    const timer = useRef(0);
    useRef(0);
    const b = cn('barrage');
    const classes = classNames(className, b(''), {
        [`nut-barrage__body${timeId.current}`]: true,
    });
    useImperativeHandle(ref, () => ({
        add: (word) => {
            barrageListSet.current = [...barrageListSet.current, word];
            run();
        },
    }));
    useEffect(() => {
        barrageListSet.current = [...barrageList];
        run();
        return () => {
            clearInterval(timer.current);
        };
    }, [barrageList]);
    const run = () => {
        setBaItemList(barrageListSet.current);
        barrageListSet.current.forEach((item, index) => {
            getNode(index);
        });
    };
    const getNode = (index) => {
        const query = createSelectorQuery();
        setTimeout(() => {
            let width = 100;
            query
                .select('.nut-barrage__body' + timeId.current)
                .boundingClientRect((rec) => {
                width = (Array.isArray(rec) ? rec[0].width : rec.width) || 300;
            });
            query
                .select('.nut-barrage__item' + index)
                .boundingClientRect((recs) => {
                let height = Array.isArray(recs) ? recs[0].width : recs.width;
                let nodeTop = (index % rows) * (height + top) + 20 + 'px';
                styleInfo(index, nodeTop, width);
            })
                .exec();
        }, 500);
    };
    const styleInfo = (index, nodeTop, width) => {
        let timeIndex = index - rows > 0 ? index - rows : 0;
        let list = styleList;
        let time = list[timeIndex] ? Number(list[timeIndex]['--time']) : 0;
        // // distance.value = '-' + (speeds / 1000) * 200 + '%';
        let obj = {
            top: nodeTop,
            '--time': `${frequency * index + time}`,
            animationDuration: `${speeds}ms`,
            animationIterationCount: `${loop ? 'infinite' : 1}`,
            animationDelay: `${frequency * index + time}ms`,
            '--move-distance': `-${width}px`,
        };
        list.push(obj);
        setStyleList([...list]);
    };
    return (React__default.createElement("div", { className: classes, ref: barrageBody, ...restProps },
        React__default.createElement("div", { ref: barrageContainer, className: "bContainer" }, baItemList.map((item, index) => {
            return (React__default.createElement("div", { className: `barrage-item nut-barrage__item${index} move`, style: styleList[index] }, item.length > 8 ? item.substr(0, 8) + '...' : item));
        }))));
};
const Barrage = React__default.forwardRef(InternalBarrage);
Barrage.defaultProps = defaultProps;
Barrage.displayName = 'NutBarrage';

export { Barrage as B };
