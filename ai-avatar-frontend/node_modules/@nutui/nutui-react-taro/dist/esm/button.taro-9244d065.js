import React__default, { useCallback, useState, useEffect } from 'react';
import { I as Icon } from './icon.taro-296a1bec.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';

const defaultProps = {
    ...ComponentDefaults,
    className: '',
    color: '',
    shape: 'round',
    plain: false,
    loading: false,
    disabled: false,
    type: 'default',
    size: 'normal',
    block: false,
    icon: '',
    iconSize: '16',
    style: {},
    children: undefined,
    onClick: (e) => { },
};
const Button = (props) => {
    const { color, shape, plain, loading, disabled, type, size, block, icon, iconSize, children, onClick, className, style, iconClassPrefix, iconFontClassName, ...rest } = {
        ...defaultProps,
        ...props,
    };
    const getStyle = useCallback(() => {
        const style = {};
        if (color) {
            if (plain) {
                style.color = color;
                style.background = '#fff';
                if (!color?.includes('gradient')) {
                    style.borderColor = color;
                }
            }
            else {
                style.color = '#fff';
                style.background = color;
            }
        }
        return style;
    }, [color, plain]);
    const classes = useCallback(() => {
        const prefixCls = 'nut-button';
        return [
            prefixCls,
            `${type ? `${prefixCls}--${type}` : ''}`,
            `${size ? `${prefixCls}--${size}` : ''}`,
            `${shape ? `${prefixCls}--${shape}` : ''}`,
            `${plain ? `${prefixCls}--plain` : ''}`,
            `${block ? `${prefixCls}--block` : ''}`,
            `${disabled ? `${prefixCls}--disabled` : ''}`,
            `${loading ? `${prefixCls}--loading` : ''}`,
        ]
            .filter(Boolean)
            .join(' ');
    }, [block, disabled, loading, plain, shape, size, type]);
    const [btnName, setBtnName] = useState(classes());
    const [btnStyle, setBtnStyle] = useState(getStyle());
    useEffect(() => {
        setBtnName(classes());
        setBtnStyle(getStyle());
    }, [
        className,
        color,
        shape,
        plain,
        loading,
        disabled,
        style,
        type,
        size,
        block,
        icon,
        iconSize,
        children,
        onClick,
        classes,
        getStyle,
    ]);
    const handleClick = (e) => {
        if (!loading && !disabled && onClick) {
            onClick(e);
        }
    };
    return (
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    // eslint-disable-next-line react/button-has-type
    React__default.createElement("button", { className: `${btnName} ${className}`, style: { ...btnStyle, ...style }, ...rest, onClick: (e) => handleClick(e) },
        React__default.createElement("div", { className: "nut-button__warp" },
            loading && (React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, name: "loading" })),
            !loading && icon ? (React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, name: icon, size: iconSize })) : (''),
            children && (React__default.createElement("div", { className: icon || loading ? 'text' : '' }, children)))));
};
Button.defaultProps = defaultProps;
Button.displayName = 'NutButton';

export { Button as B };
