import React__default, { useRef } from 'react';
import { P as Popup } from './popup.taro-01676bff.js';
import { U as Utils, C as CalendarItem } from './calendaritem.taro-16f0103d.js';
import { u as useConfig } from './configprovider.taro-8d71eb49.js';

const defaultProps = {
    type: 'one',
    isAutoBackFill: false,
    poppable: true,
    visible: false,
    title: '',
    defaultValue: '',
    startDate: Utils.getDay(0),
    endDate: Utils.getDay(365),
    showToday: true,
    startText: '',
    endText: '',
    confirmText: '',
    showTitle: true,
    showSubTitle: true,
    toDateAnimation: true,
    onBtn: undefined,
    onDay: undefined,
    onTopInfo: undefined,
    onBottomInfo: undefined,
    onClose: () => { },
    onChoose: (param) => { },
    onSelected: (data) => { },
    onYearMonthChange: (param) => { },
};
const Calendar = React__default.forwardRef((props, ref) => {
    const { locale } = useConfig();
    const { children, poppable, visible, type, isAutoBackFill, title, defaultValue, startDate, endDate, showToday, startText, endText, confirmText, showTitle, showSubTitle, toDateAnimation, onBtn, onDay, onTopInfo, onBottomInfo, onClose, onChoose, onSelected, onYearMonthChange, } = { ...defaultProps, ...props };
    const calendarRef = useRef(null);
    const close = () => {
        onClose && onClose();
    };
    const choose = (param) => {
        close();
        onChoose && onChoose(param);
    };
    const closePopup = () => {
        close();
    };
    const select = (param) => {
        onSelected && onSelected(param);
    };
    const scrollToDate = (date) => {
        calendarRef.current?.scrollToDate(date);
    };
    const yearMonthChange = (param) => {
        onYearMonthChange && onYearMonthChange(param);
    };
    React__default.useImperativeHandle(ref, () => ({
        scrollToDate,
    }));
    const renderItem = () => {
        return (React__default.createElement(CalendarItem, { ref: calendarRef, type: type, isAutoBackFill: isAutoBackFill, poppable: poppable, title: title || locale.calendaritem.title, defaultValue: defaultValue, startDate: startDate, endDate: endDate, showToday: showToday, startText: startText || locale.calendaritem.start, endText: endText || locale.calendaritem.end, confirmText: confirmText || locale.calendaritem.confirm, showTitle: showTitle, showSubTitle: showSubTitle, toDateAnimation: toDateAnimation, onBtn: onBtn, onDay: onDay, onTopInfo: onTopInfo, onBottomInfo: onBottomInfo, onChoose: choose, onSelected: select, onYearMonthChange: yearMonthChange }));
    };
    return (React__default.createElement(React__default.Fragment, null, poppable ? (React__default.createElement(Popup, { visible: visible, position: "bottom", round: true, duration: 0.5, closeable: true, destroyOnClose: true, onClickOverlay: closePopup, onClickCloseIcon: closePopup, style: { height: '85vh' } }, renderItem())) : (renderItem())));
});
Calendar.defaultProps = defaultProps;
Calendar.displayName = 'NutCalendar';

export { Calendar as C };
