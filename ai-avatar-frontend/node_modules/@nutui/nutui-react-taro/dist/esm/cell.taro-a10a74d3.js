import React__default from 'react';
import { redirectTo, navigateTo } from '@tarojs/taro';
import { c as cn } from './bem-350c1702.js';
import { I as Icon } from './icon.taro-296a1bec.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';

const defaultProps = {
    ...ComponentDefaults,
    title: null,
    subTitle: null,
    desc: '',
    descTextAlign: 'right',
    isLink: false,
    icon: '',
    roundRadius: '6px',
    url: '',
    to: '',
    replace: false,
    center: false,
    size: '',
    className: '',
    iconSlot: null,
    linkSlot: null,
    onClick: (event) => { },
};
const Cell = (props) => {
    const { children, onClick, title, subTitle, desc, descTextAlign, isLink, icon, roundRadius, url, to, replace, center, size, className, iconSlot, linkSlot, iconClassPrefix, iconFontClassName, ...rest } = {
        ...defaultProps,
        ...props,
    };
    const b = cn('cell');
    const handleClick = (event) => {
        onClick(event);
        const link = to || url;
        if (link) {
            replace ? redirectTo({ url: link }) : navigateTo({ url: link });
        }
    };
    const baseStyle = {
        borderRadius: Number.isNaN(Number(roundRadius))
            ? String(roundRadius)
            : `${roundRadius}px`,
    };
    const styles = title || subTitle || icon
        ? { textAlign: descTextAlign }
        : {
            textAlign: descTextAlign,
            flex: 1,
        };
    return (React__default.createElement("div", { className: `${b({ clickable: !!(isLink || to), center, large: size === 'large' }, [className])} `, onClick: (event) => handleClick(event), style: baseStyle, ...rest }, children || (React__default.createElement(React__default.Fragment, null,
        icon || iconSlot ? (React__default.createElement("div", { className: b('icon') }, iconSlot ||
            (icon ? (React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, name: icon, className: "icon" })) : null))) : null,
        title || subTitle ? (React__default.createElement("div", { className: `${b('title')}` },
            title ? React__default.createElement("div", { className: b('maintitle') }, title) : null,
            subTitle ? (React__default.createElement("div", { className: b('subtitle') }, subTitle)) : null)) : null,
        desc ? (React__default.createElement("div", { className: b('value', {
                alone: !title && !subTitle,
            }), style: styles }, desc)) : null,
        !linkSlot && (isLink || to) ? (React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, name: "right", className: b('link') })) : (linkSlot)))));
};
Cell.defaultProps = defaultProps;
Cell.displayName = 'NutCell';

export { Cell as C };
