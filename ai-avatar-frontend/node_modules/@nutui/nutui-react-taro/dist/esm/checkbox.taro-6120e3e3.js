import React__default, { createContext, useImperativeHandle, useState, useEffect, useCallback, useContext } from 'react';
import { I as Icon } from './icon.taro-296a1bec.js';
import { c as cn } from './bem-350c1702.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';

const CheckboxGroupContext = createContext(null);

const defaultProps$1 = {
    disabled: false,
    checkedValue: [],
    max: undefined,
    textPosition: 'right',
    direction: 'vertical',
    onChange: (value) => { },
    options: [],
};
const CheckboxGroup = React__default.forwardRef((props, ref) => {
    const { children } = { ...defaultProps$1, ...props };
    const b = cn('checkboxgroup');
    const { className, disabled, onChange, checkedValue, max, textPosition, direction, options, ...rest } = props;
    useImperativeHandle(ref, () => ({
        toggleAll(state) {
            if (state === false) {
                setInnerValue([]);
            }
            else {
                const childrenLabel = [];
                React__default.Children.map(children, (child) => {
                    const childProps = child.props;
                    childrenLabel.push(childProps.label || child.children);
                });
                setInnerValue(childrenLabel);
            }
        },
        toggleReverse() {
            const childrenLabel = [];
            React__default.Children.map(children, (child) => {
                const childProps = child.props;
                childrenLabel.push(childProps.label || child.children);
            });
            const reverse = childrenLabel.filter((c) => innerValue?.findIndex((v) => v === c) === -1);
            setInnerValue(reverse);
        },
    }));
    const [innerValue, setInnerValue] = useState(checkedValue || []);
    useEffect(() => {
        setInnerValue(checkedValue || []);
    }, [checkedValue]);
    const renderOptions = useCallback(() => {
        return options?.map(({ label, value, disabled, onChange, ...rest }) => {
            return (React__default.createElement(Checkbox, { key: value?.toString(), children: label, label: value, ...rest }));
        });
    }, [options, max]);
    return (React__default.createElement(CheckboxGroupContext.Provider, { value: {
            textPosition: textPosition || 'left',
            disabled,
            max,
            checkedValue: innerValue || [],
            check: (value) => {
                const combined = [...innerValue, value];
                setInnerValue(combined);
                onChange && onChange(combined);
            },
            uncheck: (value) => {
                const reduced = innerValue.filter((item) => item !== value);
                setInnerValue(reduced);
                onChange && onChange(reduced);
            },
        } },
        React__default.createElement("div", { className: `${b()} nut-checkboxgroup--${props.direction} ${className || ''}`, ...rest }, options?.length ? renderOptions() : children)));
});
CheckboxGroup.defaultProps = defaultProps$1;
CheckboxGroup.displayName = 'NutCheckboxGroup';

const defaultProps = {
    ...ComponentDefaults,
    checked: false,
    disabled: false,
    textPosition: 'right',
    iconSize: 18,
    iconName: 'check-normal',
    iconActiveName: 'checked',
    iconClassPrefix: 'nut-icon',
    iconFontClassName: 'nutui-iconfont',
    iconIndeterminateName: 'check-disabled',
    onChange: (state, label) => { },
};
const Checkbox = (props) => {
    const { children } = {
        ...defaultProps,
        ...props,
    };
    const b = cn('checkbox');
    const { iconName, iconSize, label, className, iconActiveName, checked, disabled, onChange, indeterminate, iconClassPrefix, iconFontClassName, iconIndeterminateName, ...others } = props;
    // eslint-disable-next-line prefer-const
    let { textPosition, ...rest } = others;
    const ctx = useContext(CheckboxGroupContext);
    let [innerChecked, setInnerChecked] = useState(checked);
    // eslint-disable-next-line prefer-const
    let [innerDisabled, setDisabled] = useState(disabled);
    const [_indeterminate, setIndeterminate] = useState(indeterminate);
    useEffect(() => {
        !ctx && setInnerChecked(checked);
        setDisabled(disabled);
        setIndeterminate(indeterminate);
    }, [disabled, checked, indeterminate]);
    if (ctx) {
        if (ctx.textPosition !== undefined) {
            textPosition = ctx.textPosition;
        }
        innerDisabled = ctx.disabled;
        innerChecked = ctx.checkedValue.includes(label);
        setInnerChecked = (checked) => {
            if (ctx.disabled)
                return;
            if (checked)
                ctx.check(label);
            if (!checked)
                ctx.uncheck(label);
        };
    }
    const getIconName = () => {
        if (!innerChecked) {
            return iconName;
        }
        if (_indeterminate) {
            return iconIndeterminateName;
        }
        return iconActiveName;
    };
    const renderIcon = () => {
        return (React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, name: getIconName(), size: iconSize, className: color() }));
    };
    const color = () => {
        if (innerDisabled) {
            return 'nut-checkbox__icon--disable';
        }
        if (innerChecked) {
            if (_indeterminate) {
                return 'nut-checkbox__icon--indeterminate';
            }
            return 'nut-checkbox__icon';
        }
        return 'nut-checkbox__icon--unchecked';
    };
    const renderLabel = () => {
        return (React__default.createElement("span", { className: `${b('label', { disabled: innerDisabled })} ` }, children || label));
    };
    const handleClick = () => {
        // 禁用的时候直接返回
        if (disabled)
            return;
        // 先转换状态
        const latestChecked = !innerChecked;
        // 判断是不是有 context 和 max，有的话需要判断是不是超过最大限制
        if (ctx && ctx.max !== undefined) {
            if (latestChecked && ctx.checkedValue.length >= ctx.max)
                return;
        }
        onChange && onChange(latestChecked, label || children);
        setInnerChecked(latestChecked);
    };
    return (React__default.createElement("div", { className: `${b({ reverse: textPosition === 'left' })} ${className || ''}`, ...rest, onClick: handleClick },
        renderIcon(),
        renderLabel()));
};
Checkbox.defaultProps = defaultProps;
Checkbox.displayName = 'NutCheckBox';
Checkbox.Group = CheckboxGroup;

export { Checkbox as C, CheckboxGroup as a };
