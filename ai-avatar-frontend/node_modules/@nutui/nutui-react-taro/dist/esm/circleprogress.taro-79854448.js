import React__default, { useState, useEffect } from 'react';
import classNames from 'classnames';
import { a as isObject } from './index-5bcb0ff8.js';
import { c as cn } from './bem-350c1702.js';

const defaultProps = {
    strokeWidth: 5,
    radius: 50,
    strokeLinecap: 'round',
    circleColor: '#fa2c19',
    pathColor: '#e5e9f2',
    clockwise: true,
};
const CircleProgress = (props) => {
    const { children, progress, className, radius, pathColor, clockwise, circleColor, strokeWidth, style, strokeLinecap, ...restProps } = {
        ...defaultProps,
        ...props,
    };
    const [oldValue, setOldValue] = useState(progress);
    const b = cn('circleprogress');
    const classes = classNames(className, b(''));
    const refRandomId = Math.random().toString(36).slice(-8);
    const styles = {
        height: `${Number(radius) * 2}px`,
        width: `${Number(radius) * 2}px`,
        ...style,
    };
    useEffect(() => {
        let rafId;
        const startTime = Date.now();
        const startRate = Number(oldValue); // 30
        const endRate = Number(progress); // 40
        const duration = Math.abs(((startRate - endRate) * 1000) / +100); // 100
        const animate = () => {
            const now = Date.now();
            const progress = Math.min((now - startTime) / duration, 1);
            const rate = progress * (endRate - startRate) + startRate;
            setOldValue(Math.min(Math.max(+rate, 0), 100));
            if (endRate > startRate ? rate < endRate : rate > endRate) {
                rafId = window.requestAnimationFrame(animate);
            }
        };
        if (rafId) {
            cancelAnimationFrame(rafId);
        }
        rafId = window.requestAnimationFrame(animate);
    }, [progress]);
    const cancelAnimationFrame = function (id) {
        clearTimeout(id);
    };
    const stop = () => {
        if (!isObject(circleColor)) {
            return [];
        }
        const color = circleColor;
        const colorArr = Object.keys(color).sort((a, b) => parseFloat(a) - parseFloat(b));
        const stopArr = [];
        colorArr.map((item) => {
            const obj = {
                key: '',
                value: '',
            };
            obj.key = item;
            obj.value = color[item];
            stopArr.push(obj);
        });
        return stopArr;
    };
    const transColor = (color) => {
        return color && color.replace('#', '%23');
    };
    const format = (progress) => Math.min(Math.max(+progress, 0), 100);
    const circleStyle = () => {
        const stopArr = stop();
        const stopDom = [];
        if (stopArr) {
            stopArr.map((item) => {
                let obj = '';
                obj = `%3Cstop offset='${item.key}' stop-color='${transColor(item.value)}'/%3E`;
                stopDom.push(obj);
            });
        }
        const perimeter = 283;
        const progress = +oldValue;
        const offset = (perimeter * Number(format(parseFloat(progress.toFixed(1))))) / 100;
        const isWise = props.clockwise ? 1 : 0;
        const color = isObject(circleColor)
            ? `url(%23${refRandomId})`
            : transColor(circleColor);
        const d = `M 50 50 m 0 -45 a 45 45 0 1 ${isWise} 0 90 a 45 45 0 1, ${isWise} 0 -90`;
        const pa = `%3Cdefs%3E%3ClinearGradient id='${refRandomId}' x1='100%25' y1='0%25' x2='0%25' y2='0%25'%3E${stopDom}%3C/linearGradient%3E%3C/defs%3E`;
        const path = `%3Cpath d='${d}' stroke-width='${strokeWidth}' stroke='${transColor(props.pathColor)}' fill='none'/%3E`;
        const path1 = `%3Cpath d='${d}' stroke-width='${strokeWidth}' stroke-dasharray='${offset},${perimeter}' stroke-linecap='round' stroke='${transColor(color)}' fill='none'/%3E`;
        return {
            background: `url("data:image/svg+xml,%3Csvg viewBox='0 0 100 100'  xmlns='http://www.w3.org/2000/svg'%3E${pa}${path}${path1}%3C/svg%3E")`,
            width: '100%',
            height: '100%',
        };
    };
    return (React__default.createElement("div", { className: classes, style: styles, ...restProps },
        React__default.createElement("div", { style: circleStyle() }),
        React__default.createElement("div", { className: "nut-circleprogress-text" }, children || React__default.createElement("div", null,
            progress,
            "%"))));
};
CircleProgress.defaultProps = defaultProps;
CircleProgress.displayName = 'NutCircleProgress';

export { CircleProgress as C };
