import React__default, { memo, useState, useEffect } from 'react';
import classNames from 'classnames';
import { c as cn } from './bem-350c1702.js';

const defaultProps = {
    activeName: ['0'],
    accordion: false,
    icon: '',
    iconSize: '16px',
    iconColor: '',
    rotate: 180,
};
function areEqual(prevProps, nextProps) {
    return (prevProps.children === nextProps.children &&
        JSON.stringify(prevProps.activeName) ===
            JSON.stringify(nextProps.activeName));
}
const Collapse = memo((props) => {
    const { className, style, children, activeName, accordion, icon, rotate, iconSize, iconColor, onChange, } = {
        ...defaultProps,
        ...props,
    };
    const childrenDom = React__default.Children.toArray(children);
    const [defaultOpenIndex, setDefaultOpenIndex] = useState([]);
    const handleActiveName = () => {
        let activeArr = [];
        if (!Array.isArray(activeName)) {
            activeArr.push(activeName.toString());
        }
        else {
            // 数组
            if (accordion && activeName.length > 1) {
                console.warn('手风琴模式不支持传递多个打开页签');
            }
            const activeNameStr = activeName.map((item) => {
                return item.toString();
            });
            activeArr = [...activeNameStr];
        }
        return activeArr;
    };
    const colBem = cn('collapse');
    useEffect(() => {
        const activeArr = handleActiveName();
        setDefaultOpenIndex(activeArr);
    }, [activeName]);
    const onToggle = (isOpen, name) => {
        let newOpenIndex = [...defaultOpenIndex];
        if (isOpen) {
            // 当前状态为true，则变为false,闭合
            const removeIndex = newOpenIndex.findIndex((value) => {
                return value === name;
            });
            newOpenIndex.splice(removeIndex, 1);
        }
        else {
            // 当前状态为false，变为true，展开
            // eslint-disable-next-line no-lonely-if
            if (accordion) {
                newOpenIndex = [name];
            }
            else {
                newOpenIndex.push(name);
            }
        }
        setDefaultOpenIndex(newOpenIndex);
        onChange && onChange(!isOpen, name);
    };
    return (React__default.createElement("div", { className: classNames(colBem(), className), style: style }, childrenDom.map((item) => {
        return React__default.cloneElement(item, {
            isOpen: defaultOpenIndex.includes(item.props.name),
            onToggle: (isOpen, name) => onToggle(isOpen, name),
            icon,
            rotate,
            iconSize,
            iconColor,
        });
    })));
}, areEqual);
Collapse.defaultProps = defaultProps;
Collapse.displayName = 'NutCollapse';

export { Collapse as C };
