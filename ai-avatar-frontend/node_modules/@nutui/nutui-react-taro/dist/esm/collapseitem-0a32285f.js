import React__default, { useState, useCallback, useEffect } from 'react';
import { c as cn } from './bem-350c1702.js';
import { I as Icon } from './icon-296a1bec.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';

const defaultProps = {
    ...ComponentDefaults,
    title: '',
    name: '',
    isOpen: false,
    icon: '',
    iconSize: '',
    iconColor: '',
    disabled: false,
    rotate: 180,
    subTitle: '',
    titleIcon: '',
    titleIconColor: '',
    titleIconPosition: '',
    titleIconSize: '',
    childnull: true,
};
const CollapseItem = (props) => {
    const { children, title, isOpen, onToggle, name, disabled, icon, rotate, subTitle, titleIcon, titleIconColor, titleIconPosition, titleIconSize, iconSize, iconColor, childnull, iconClassPrefix, iconFontClassName, ...rest } = {
        ...defaultProps,
        ...props,
    };
    const [domHeight, setDomHeight] = useState(-1); // 保存content的高度
    const [currHeight, setCurrHeight] = useState('auto'); // 设置content的高度
    const [update, setUpdate] = useState(false);
    const [iconStyle, setIconStyle] = useState({
        transform: 'translateY(-50%)',
    });
    const colBem = cn('collapse-item');
    const measuredRef = useCallback((node) => {
        if (node !== null) {
            setDomHeight(node.getBoundingClientRect().height);
        }
    }, [update]);
    useEffect(() => {
        // 一开始content都有高度，在这里根据isOpen，改变其高度
        setTimeout(() => {
            if (domHeight !== -1) {
                isOpen ? setCurrHeight(`auto`) : setCurrHeight('0px');
            }
            const newIconStyle = isOpen
                ? { transform: `translateY(-50%) rotate(${rotate}deg)` }
                : { transform: 'translateY(-50%)' };
            setIconStyle(newIconStyle);
        }, 10);
    }, [isOpen, domHeight, rotate]);
    useEffect(() => {
        if (!isOpen) {
            setCurrHeight('0px');
        }
        else {
            setCurrHeight('auto');
        }
        setUpdate(!update);
    }, [children, isOpen]);
    return (React__default.createElement("div", { className: colBem(), ...rest },
        React__default.createElement("div", { className: colBem('header', { disabled }), onClick: () => {
                if (disabled)
                    return;
                onToggle && onToggle(isOpen, name);
            } },
            React__default.createElement("div", { className: colBem('title') },
                titleIcon && titleIconPosition === 'left' && (React__default.createElement("b", { className: colBem('title-icon-left') },
                    React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, name: titleIcon, size: titleIconSize, color: disabled ? '#C2C2C2' : titleIconColor }))),
                title,
                titleIcon && titleIconPosition === 'right' && (React__default.createElement("b", { className: colBem('title-icon-right') },
                    React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, name: titleIcon, size: titleIconSize, color: disabled ? '#C2C2C2' : titleIconColor })))),
            React__default.createElement("div", { className: colBem('sub-title') }, subTitle),
            React__default.createElement("div", { className: colBem('icon-box') },
                React__default.createElement("div", { className: colBem('icon'), style: iconStyle },
                    React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, name: icon, size: iconSize, color: disabled ? '#C2C2C2' : iconColor })))),
        childnull && (React__default.createElement("div", { className: colBem('content'), style: { height: currHeight }, ref: measuredRef },
            React__default.createElement("div", { className: colBem('content-text') }, children)))));
};
CollapseItem.defaultProps = defaultProps;
CollapseItem.displayName = 'NutCollapseItem';

export { CollapseItem as C };
