import React__default, { useState, useRef, useImperativeHandle, useEffect } from 'react';
import { c as cn } from './bem-350c1702.js';
import { u as useConfig } from './configprovider.taro-8d71eb49.js';

const defaultProps = {
    paused: false,
    startTime: Date.now(),
    endTime: Date.now(),
    remainingTime: 0,
    millisecond: false,
    format: 'HH:mm:ss',
    autoStart: true,
    time: 0,
    destroy: false,
};
const InternalCountDown = (props, ref) => {
    useConfig();
    const { paused, startTime, endTime, remainingTime, millisecond, format, autoStart, time, destroy, className, style, onEnd, onPaused, onRestart, onUpdate, children, ...rest } = { ...defaultProps, ...props };
    const b = cn('countdown');
    const [restTimeStamp, setRestTime] = useState(0);
    const stateRef = useRef({
        pauseTime: 0,
        curr: 0,
        isPaused: paused,
        isIninted: false,
        timer: 0,
        restTime: 0,
        counting: !paused && autoStart,
        handleEndTime: Date.now(),
        diffTime: 0, // 设置了 startTime 时，与 date.now() 的差异
    });
    // 时间戳转换 或 获取当前时间的时间戳
    const getTimeStamp = (timeStr) => {
        if (!timeStr)
            return Date.now();
        let t = timeStr;
        t = t > 0 ? +t : t.toString().replace(/-/g, '/');
        return new Date(t).getTime();
    };
    // 倒计时 interval
    const initTime = () => {
        if (remainingTime) {
            stateRef.current.handleEndTime = Date.now() + Number(remainingTime);
        }
        else {
            stateRef.current.handleEndTime = endTime;
            stateRef.current.diffTime = Date.now() - getTimeStamp(startTime); // 时间差
        }
        if (!stateRef.current.counting)
            stateRef.current.counting = true;
        tick();
    };
    const tick = () => {
        stateRef.current.timer = requestAnimationFrame(() => {
            if (stateRef.current.counting) {
                const currentTime = Date.now() - stateRef.current.diffTime;
                const remainTime = Math.max(stateRef.current.handleEndTime - currentTime, 0);
                stateRef.current.restTime = remainTime;
                setRestTime(remainTime);
                if (!remainTime) {
                    stateRef.current.counting = false;
                    pause();
                    onEnd && onEnd();
                }
                if (remainTime > 0) {
                    tick();
                }
            }
        });
    };
    // 将倒计时剩余时间格式化   参数： t  时间戳  type custom 自定义类型
    const formatRemainTime = (t, type) => {
        const ts = t;
        const rest = {
            d: 0,
            h: 0,
            m: 0,
            s: 0,
            ms: 0,
        };
        const SECOND = 1000;
        const MINUTE = 60 * SECOND;
        const HOUR = 60 * MINUTE;
        const DAY = 24 * HOUR;
        if (ts > 0) {
            rest.d = ts >= SECOND ? Math.floor(ts / DAY) : 0;
            rest.h = Math.floor((ts % DAY) / HOUR);
            rest.m = Math.floor((ts % HOUR) / MINUTE);
            rest.s = Math.floor((ts % MINUTE) / SECOND);
            rest.ms = Math.floor(ts % SECOND);
        }
        return type === 'custom' ? rest : parseFormat({ ...rest });
    };
    const parseFormat = (time) => {
        const { d } = time;
        let { h, m, s, ms } = time;
        let formatCache = format;
        if (formatCache.includes('DD')) {
            formatCache = formatCache.replace('DD', padZero(d));
        }
        else {
            h += Number(d) * 24;
        }
        if (formatCache.includes('HH')) {
            formatCache = formatCache.replace('HH', padZero(h));
        }
        else {
            m += Number(h) * 60;
        }
        if (formatCache.includes('mm')) {
            formatCache = formatCache.replace('mm', padZero(m));
        }
        else {
            s += Number(m) * 60;
        }
        if (formatCache.includes('ss')) {
            formatCache = formatCache.replace('ss', padZero(s));
        }
        else {
            ms += Number(s) * 1000;
        }
        if (formatCache.includes('S')) {
            const msC = padZero(ms, 3).toString();
            if (formatCache.includes('SSS')) {
                formatCache = formatCache.replace('SSS', msC);
            }
            else if (formatCache.includes('SS')) {
                formatCache = formatCache.replace('SS', msC.slice(0, 2));
            }
            else if (formatCache.includes('S')) {
                formatCache = formatCache.replace('SS', msC.slice(0, 1));
            }
        }
        return formatCache;
    };
    const padZero = (num, length = 2) => {
        num += '';
        while (num.length < length) {
            num = `0${num}`;
        }
        return num.toString();
    };
    // 暂定
    const pause = () => {
        cancelAnimationFrame(stateRef.current.timer);
        stateRef.current.counting = false;
        onPaused && onPaused(stateRef.current.restTime);
    };
    useImperativeHandle(ref, () => ({
        start: () => {
            if (!stateRef.current.counting && !autoStart) {
                stateRef.current.counting = true;
                stateRef.current.handleEndTime =
                    Date.now() + Number(stateRef.current.restTime);
                tick();
                onRestart && onRestart(stateRef.current.restTime);
            }
        },
        pause: () => {
            cancelAnimationFrame(stateRef.current.timer);
            stateRef.current.counting = false;
            onPaused && onPaused(stateRef.current.restTime);
        },
        reset: () => {
            if (!autoStart) {
                pause();
                stateRef.current.restTime = time;
                setRestTime(time);
            }
        },
    }));
    // 监听值变更
    useEffect(() => {
        const tranTime = formatRemainTime(stateRef.current.restTime, 'custom');
        onUpdate && onUpdate(tranTime);
    }, [restTimeStamp]);
    // 监听暂停
    useEffect(() => {
        if (stateRef.current.isIninted) {
            if (paused) {
                if (stateRef.current.counting) {
                    pause();
                }
            }
            else {
                if (!stateRef.current.counting) {
                    stateRef.current.counting = true;
                    stateRef.current.handleEndTime =
                        Date.now() + Number(stateRef.current.restTime);
                    tick();
                }
                onRestart && onRestart(stateRef.current.restTime);
            }
        }
    }, [paused]);
    // 监听开始结束时间变更
    useEffect(() => {
        if (stateRef.current.isIninted) {
            initTime();
        }
    }, [endTime, startTime, remainingTime]);
    // 初始化
    useEffect(() => {
        if (autoStart) {
            initTime();
        }
        else {
            stateRef.current.restTime = time;
            setRestTime(time);
        }
        if (!stateRef.current.isIninted) {
            stateRef.current.isIninted = true;
        }
        return componentWillUnmount;
    }, []);
    const componentWillUnmount = () => {
        destroy && cancelAnimationFrame(stateRef.current.timer);
    };
    const renderTime = (() => {
        return formatRemainTime(stateRef.current.restTime);
    })();
    return (React__default.createElement("div", { className: `${b()} ${className || ''}`, style: { ...style }, ...rest }, children || (React__default.createElement("div", { className: b('block'), 
        // eslint-disable-next-line react/no-danger
        dangerouslySetInnerHTML: {
            __html: `${renderTime}`,
        } }))));
};
const CountDown = React__default.forwardRef(InternalCountDown);
CountDown.defaultProps = defaultProps;
CountDown.displayName = 'NutCountDown';

export { CountDown as C };
