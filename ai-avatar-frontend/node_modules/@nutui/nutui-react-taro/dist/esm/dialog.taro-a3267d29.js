import * as React from 'react';
import React__default, { forwardRef } from 'react';
import classNames from 'classnames';
import { B as Button } from './button.taro-9244d065.js';
import { View } from '@tarojs/components';
import { CSSTransition } from 'react-transition-group';
import { u as useConfig } from './configprovider.taro-8d71eb49.js';

const Content = (props) => {
    const { visible, title, footer, textAlign, footerDirection, onClickSelf, children, } = props;
    let headerNode;
    if (title) {
        headerNode = React__default.createElement("div", { className: "nut-dialog__header" }, title);
    }
    let footerNode;
    if (footer) {
        footerNode = (React__default.createElement("div", { className: classNames('nut-dialog__footer', {
                [footerDirection]: footerDirection,
            }) }, footer));
    }
    const handleClick = () => {
        onClickSelf && onClickSelf();
    };
    return (React__default.createElement("div", { className: "nut-dialog__outer", onClick: handleClick },
        React__default.createElement("div", { className: "nut-dialog", style: { display: visible ? 'flex' : 'none' } },
            headerNode,
            React__default.createElement("div", { className: "nut-dialog__content", style: { textAlign } },
                React__default.createElement("div", null, children)),
            footerNode)));
};
Content.displayName = 'NutContent';

function Mask(props) {
    return React.createElement("div", { className: "nut-dialog__mask" });
}

const DialogWrap = (props) => {
    const { className, style, visible, mask, closeOnClickOverlay, lockScroll, onClosed, onCancel, } = props;
    const handleClick = (e) => {
        if (closeOnClickOverlay && visible && e.target === e.currentTarget) {
            onClosed?.();
            onCancel?.();
            lockScroll && document.body.classList.remove('nut-overflow-hidden');
        }
    };
    const wrapStyle = {
        ...style,
        display: visible ? 'block' : 'none',
    };
    if (lockScroll && visible) {
        document.body.classList.add('nut-overflow-hidden');
    }
    return (React__default.createElement(React__default.Fragment, null,
        mask ? (React__default.createElement(CSSTransition, { in: visible, timeout: 300, classNames: "fadeDialog", unmountOnExit: true, appear: true },
            React__default.createElement(Mask, null))) : null,
        React__default.createElement("div", { className: classNames('nut-dialog__wrap', className), onClick: handleClick, style: wrapStyle },
            React__default.createElement(Content, { ...props, visible: visible }))));
};
DialogWrap.displayName = 'NutDialogWrap';

const DialogWrapper = (props) => {
    const { visible, lockScroll } = props;
    return (React__default.createElement(View, { style: { display: visible ? 'block' : 'none' }, catchMove: lockScroll },
        React__default.createElement(DialogWrap, { ...props })));
};
DialogWrapper.displayName = 'NutDialogWrapper';

const defaultProps = {
    okText: '',
    cancelText: '',
    mask: true,
    closeOnClickOverlay: true,
    noFooter: false,
    noOkBtn: false,
    noCancelBtn: false,
    okBtnDisabled: false,
    cancelAutoClose: true,
    textAlign: 'center',
    footerDirection: 'horizontal',
    lockScroll: false,
};
const BaseDialog = forwardRef((props, ref) => {
    const { locale } = useConfig();
    const { visible, footer, noOkBtn, noCancelBtn, lockScroll, okBtnDisabled, cancelAutoClose, okText, cancelText, onClosed, onCancel, onOk, ...restProps } = props;
    const renderFooter = function () {
        if (footer === null)
            return '';
        const handleCancel = function (e) {
            e.stopPropagation();
            if (!cancelAutoClose)
                return;
            onClosed?.();
            onCancel?.();
            if (lockScroll && visible) {
                document.body.classList.remove('nut-overflow-hidden');
            }
        };
        const handleOk = function (e) {
            e.stopPropagation();
            onClosed?.();
            onOk?.(e);
            if (lockScroll && visible) {
                document.body.classList.remove('nut-overflow-hidden');
            }
        };
        const footerContent = footer || (React__default.createElement(React__default.Fragment, null,
            !noCancelBtn && (React__default.createElement(Button, { size: "small", plain: true, type: "primary", className: "nut-dialog__footer-cancel", onClick: (e) => handleCancel(e) }, cancelText || locale.cancel)),
            !noOkBtn && (React__default.createElement(Button, { size: "small", type: "primary", className: classNames('nut-dialog__footer-ok', {
                    disabled: okBtnDisabled,
                }), disabled: okBtnDisabled, onClick: (e) => handleOk(e) }, okText || locale.confirm))));
        return footerContent;
    };
    return (React__default.createElement(DialogWrapper, { ...restProps, visible: visible, lockScroll: lockScroll, footer: renderFooter(), onClosed: onClosed, onCancel: onCancel }));
});
BaseDialog.defaultProps = defaultProps;
BaseDialog.displayName = 'NutDialog';

export { BaseDialog as B };
