import React__default, { useRef } from 'react';
import { C as ComponentDefaults } from './typings-b9828dba.js';
import { C as CellGroup } from './cellgroup.taro-abe501bc.js';
import { a as FormItemContext, F as FormItem } from './formitem.taro-190a3326.js';

/**
 * 用于存储表单的数据
 */
class FormStore {
    store = {}; // 存放表单中所有的数据 eg. {password: "ddd",username: "123"}
    fieldEntities = []; // 所有的组件实例
    // 成功和失败的回调
    callbacks = {};
    errList = [];
    constructor() {
        this.callbacks = {
            onFinish: (value) => { },
            onFinishFailed: () => { },
        };
    }
    /**
     * 注册组件实例
     * @param field
     */
    registerField = (field) => {
        this.fieldEntities.push(field);
        return () => {
            this.fieldEntities = this.fieldEntities.filter((item) => item != field);
            delete this.store[field.props.name];
        };
    };
    getFieldValue = (name) => {
        return this.store[name];
    };
    /**
     * 存储组件数据
     * @param newStore { [name]: newValue }
     */
    setFieldsValue = (newStore) => {
        this.store = {
            ...this.store,
            ...newStore,
        };
        this.fieldEntities.forEach((enetity) => {
            const { name } = enetity.props;
            Object.keys(newStore).forEach((key) => {
                if (key === name) {
                    enetity.onStoreChange();
                }
            });
        });
    };
    /**
     * 表单校验
     * rules: { required: true, message: '' }
     * descriptor: {
     *    username: {
     *      type: 'string',
     *      required: true,
     *      validator: (rule, value) => {
     *        return /^[a-zA-Z0-9]+$/.test(value)
     *      },
     *    },
     *  }
     */
    validate = () => {
        const err = [];
        this.errList.length = 0;
        this.fieldEntities.forEach((entity) => {
            const { name, rules = [] } = entity.props;
            const descriptor = {};
            if (rules.length) {
                // 多条校验规则
                if (rules.length > 1) {
                    descriptor[name] = [];
                    rules.map((v) => {
                        descriptor[name].push(v);
                    });
                }
                else {
                    descriptor[name] = rules[0];
                }
            }
            // const validator = new Schema(descriptor)
            // validator.validate({ [name]: this.store[name] }, (errors) => {
            //   if (errors) {
            //     err.push(...errors)
            //     this.errList.push(...errors)
            //     // 表单项更新
            //   }
            //   entity.onStoreChange()
            // })
        });
        return err;
    };
    setCallback = (callback) => {
        this.callbacks = {
            ...this.callbacks,
            ...callback,
        };
    };
    submit = () => {
        const err = this.validate();
        if (err.length === 0) {
            this.callbacks.onFinish?.(this.store);
        }
        else if (err.length > 0) {
            this.callbacks.onFinishFailed?.(err);
        }
    };
    resetFields = () => { };
    getForm = () => {
        return {
            setCallback: this.setCallback,
            registerField: this.registerField,
            getFieldValue: this.getFieldValue,
            setFieldsValue: this.setFieldsValue,
            submit: this.submit,
            store: this.store,
            errList: this.errList,
            fieldEntities: this.fieldEntities,
        };
    };
}
const useForm = (form) => {
    const formRef = useRef();
    if (!formRef.current) {
        if (form) {
            formRef.current = form;
        }
        else {
            const formStore = new FormStore();
            formRef.current = formStore.getForm();
        }
    }
    return [formRef.current];
};

const defaultProps = {
    ...ComponentDefaults,
    className: '',
    style: undefined,
    form: {},
    labelPosition: 'Right',
    formGroupTitle: '',
    onFinish: (obj) => { },
    onFinishFailed: (value) => { },
    starPositon: 'Left',
};
const PositionInfo = {
    Top: 'form-layout-top',
    Left: 'form-layout-left',
    Right: 'form-layout-right',
};
const Form = (props) => {
    const { children, onFinish, onFinishFailed, labelPosition, starPositon, ...rest } = {
        ...defaultProps,
        ...props,
    };
    const [formInstance] = useForm();
    formInstance.starPositon = starPositon;
    const { setCallback, submit } = formInstance;
    setCallback({
        onFinish,
        onFinishFailed,
    });
    return (React__default.createElement("form", { className: `nut-form ${PositionInfo[labelPosition]} ${props.className}`, style: props.style, onSubmit: (e) => {
            e.preventDefault();
            submit();
        } },
        React__default.createElement(CellGroup, null,
            React__default.createElement(FormItemContext.Provider, { value: formInstance }, children))));
};
Form.defaultProps = defaultProps;
Form.displayName = 'NutForm';
Form.Item = FormItem;

export { Form as F };
