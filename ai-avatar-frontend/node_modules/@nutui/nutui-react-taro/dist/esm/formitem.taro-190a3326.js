import React__default, { createContext } from 'react';
import { C as Cell } from './cell.taro-a10a74d3.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';

const FormItemContext = createContext({});

const defaultProps = {
    ...ComponentDefaults,
    name: '',
    label: '',
    className: '',
    rules: [{ required: false, message: '' }],
    disabled: false,
    labelWidth: 90,
    errorMessageAlign: 'left',
    showErrorLine: true,
    showErrorMessage: true,
};
class FormItem extends React__default.Component {
    static defaultProps = defaultProps;
    static contextType = FormItemContext;
    cancelRegister;
    componentDidMount() {
        // 注册组件实例到FormStore
        this.cancelRegister = this.context.registerField(this);
    }
    componentWillUnmount() {
        if (this.cancelRegister) {
            this.cancelRegister();
        }
    }
    // children添加value属性和onChange事件
    getControlled = (children) => {
        const { getFieldValue, setFieldsValue } = this.context;
        const { name } = this.props;
        const type = children.type.NAME;
        return {
            value: getFieldValue(name),
            onChange: (event) => {
                let newValue = event;
                switch (type) {
                    case 'checkbox':
                        newValue = event.target
                            .value;
                        break;
                }
                setFieldsValue({ [name]: newValue });
            },
        };
    };
    onStoreChange = () => {
        this.forceUpdate();
    };
    renderLayout = (childNode) => {
        const { label, name, rules = [{ required: false, message: '' }], className, labelWidth, errorMessageAlign, showErrorLine, showErrorMessage, } = {
            ...defaultProps,
            ...this.props,
        };
        const item = this.context.errList?.length > 0 &&
            this.context.errList?.filter((item) => {
                return item.field === name;
            });
        const { starPositon } = this.context;
        const renderStar = rules.length > 0 && rules[0].required && (React__default.createElement("i", { className: "required" }));
        const renderLabel = starPositon === 'Right' ? (React__default.createElement(React__default.Fragment, null,
            label,
            renderStar)) : (React__default.createElement(React__default.Fragment, null,
            renderStar,
            label));
        return (React__default.createElement(Cell, { className: `nut-form-item ${className}` },
            label ? (React__default.createElement("div", { className: "nut-cell__title nut-form-item__label", style: {
                    width: this.pxCheck(labelWidth),
                } }, renderLabel)) : null,
            React__default.createElement("div", { className: "nut-cell__value nut-form-item__body" },
                React__default.createElement("div", { className: "nut-form-item__body__slots" }, childNode),
                item.length > 0 && (React__default.createElement("div", { className: "nut-form-item__body__tips", style: { textAlign: errorMessageAlign } }, item[0].message)))));
    };
    pxCheck = (value) => {
        return Number.isNaN(Number(value)) ? String(value) : `${value}px`;
    };
    render() {
        const { children } = this.props;
        const c = Array.isArray(children) ? children[0] : children;
        const returnChildNode = React__default.cloneElement(c, this.getControlled(c));
        return this.renderLayout(returnChildNode);
    }
}

export { FormItem as F, FormItemContext as a };
