import React__default from 'react';
import classNames from 'classnames';
import { u as useConfig } from './configprovider.taro-8d71eb49.js';
import { c as cn } from './bem-350c1702.js';
import { G as GridContext } from './grid.taro.context-c2bbfb4f.js';

const defaultProps = {
    columnNum: 4,
    border: true,
    gutter: 0,
    center: true,
    square: false,
    reverse: false,
    direction: 'vertical',
    iconSize: 28,
    iconColor: '',
};
const Grid = (props) => {
    useConfig();
    const { children, columnNum, border, gutter, center, square, reverse, direction, style, iconSize, iconColor, className, onClick, ...rest } = { ...defaultProps, ...props };
    const childrenDom = React__default.Children.toArray(children);
    const pxCheck = (value) => {
        return Number.isNaN(Number(value)) ? String(value) : `${value}px`;
    };
    const b = cn('grid');
    const rootClass = () => {
        const prefixCls = b();
        return classNames(className, prefixCls, {
            [b('border')]: border && !gutter,
        });
    };
    const rootStyle = () => {
        let styleSelf = {};
        if (style) {
            styleSelf = style;
        }
        if (gutter) {
            styleSelf.paddingLeft = pxCheck(gutter);
        }
        return styleSelf;
    };
    return (React__default.createElement("div", { className: rootClass(), style: rootStyle(), ...rest },
        React__default.createElement(GridContext.Provider, { value: { onClick } }, childrenDom.map((item, idex) => {
            return React__default.cloneElement(item, {
                index: idex,
                columnNum,
                center,
                border,
                gutter,
                square,
                reverse,
                direction,
                parentIconSize: iconSize,
                parentIconColor: iconColor,
            });
        }))));
};
Grid.defaultProps = defaultProps;
Grid.displayName = 'NutGrid';

export { Grid as G };
