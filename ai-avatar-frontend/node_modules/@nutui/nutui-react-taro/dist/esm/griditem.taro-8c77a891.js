import React__default, { useContext } from 'react';
import classNames from 'classnames';
import { u as useConfig } from './configprovider.taro-8d71eb49.js';
import { c as cn } from './bem-350c1702.js';
import { I as Icon } from './icon.taro-296a1bec.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';
import { G as GridContext } from './grid.taro.context-c2bbfb4f.js';

const defaultProps = {
    ...ComponentDefaults,
    text: '',
    fontSize: '',
    color: '',
    icon: '',
    iconSize: '',
    iconColor: '',
    parentIconSize: '',
    parentIconColor: '',
    columnNum: 4,
    border: true,
    gutter: 0,
    center: true,
    square: false,
    reverse: false,
    direction: 'vertical',
};
const GridItem = (props) => {
    useConfig();
    const { children, columnNum, index, gutter, square, text, fontSize, color, icon, iconColor, iconSize, parentIconSize, parentIconColor, border, center, reverse, direction, iconClassPrefix, iconFontClassName, className, onClick, style, ...rest } = {
        ...defaultProps,
        ...props,
    };
    const b = cn('grid-item');
    const classes = classNames(b(), className);
    const context = useContext(GridContext);
    const pxCheck = (value) => {
        return Number.isNaN(Number(value)) ? String(value) : `${value}px`;
    };
    const rootStyle = () => {
        const rootStyle = {
            flexBasis: `${100 / +columnNum}%`,
        };
        if (square) {
            rootStyle.paddingTop = `${100 / +columnNum}%`;
        }
        else if (gutter) {
            rootStyle.paddingRight = pxCheck(gutter);
            if (index >= columnNum) {
                rootStyle.marginTop = pxCheck(gutter);
            }
        }
        return { ...rootStyle, ...style };
    };
    const contentClass = () => {
        return classNames(b('content'), {
            [b('content--border')]: border,
            [b('content--surround')]: border && gutter,
            [b('content--center')]: center,
            [b('content--square')]: square,
            [b('content--reverse')]: reverse,
            [b(`content--${direction}`)]: !!direction,
        });
    };
    const isIconName = () => {
        return typeof icon === 'string';
    };
    const handleClick = (e) => {
        onClick && onClick(e);
        context.onClick &&
            context.onClick({
                text,
                icon,
                iconSize,
                iconColor,
                parentIconSize,
                parentIconColor,
                index,
                columnNum,
                border,
                gutter,
                center,
                square,
                reverse,
                direction,
                fontSize,
                color,
            }, index);
    };
    return (React__default.createElement("div", { className: classes, style: rootStyle(), ...rest, onClick: handleClick },
        React__default.createElement("div", { className: contentClass() },
            icon && isIconName() ? (React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, name: icon, size: iconSize || parentIconSize, color: iconColor || parentIconColor })) : (React__default.createElement(React__default.Fragment, null, icon)),
            text && (React__default.createElement("div", { className: "nut-grid-item__text", style: { fontSize, color } }, text)),
            children && React__default.createElement(React__default.Fragment, null, children))));
};
GridItem.defaultProps = defaultProps;
GridItem.displayName = 'NutGridItem';

export { GridItem as G };
