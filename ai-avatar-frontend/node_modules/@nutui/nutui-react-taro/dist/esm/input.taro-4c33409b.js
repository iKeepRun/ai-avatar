import React__default, { forwardRef, useState, useRef, useEffect, useImperativeHandle, useCallback } from 'react';
import { I as Icon } from './icon.taro-296a1bec.js';
import { u as useConfig } from './configprovider.taro-8d71eb49.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';

function trimExtraChar(value, char, regExp) {
    const index = value.indexOf(char);
    if (index === -1) {
        return value;
    }
    if (char === '-' && index !== 0) {
        return value.slice(0, index);
    }
    return value.slice(0, index + 1) + value.slice(index).replace(regExp, '');
}
function formatNumber(value, allowDot = true, allowMinus = true) {
    if (allowDot) {
        value = trimExtraChar(value, '.', /\./g);
    }
    else {
        value = value.split('.')[0];
    }
    if (allowMinus) {
        value = trimExtraChar(value, '-', /-/g);
    }
    else {
        value = value.replace(/-/, '');
    }
    const regExp = allowDot ? /[^-0-9.]/g : /[^-0-9]/g;
    return value.replace(regExp, '');
}

const defaultProps = {
    ...ComponentDefaults,
    type: 'text',
    name: '',
    defaultValue: '',
    placeholder: '',
    label: '',
    labelClass: '',
    labelWidth: '80',
    labelAlign: 'left',
    colon: false,
    inputAlign: 'left',
    center: false,
    required: false,
    disabled: false,
    readonly: false,
    error: false,
    maxlength: '9999',
    leftIcon: '',
    leftIconSize: '',
    rightIcon: '',
    rightIconSize: '',
    clearable: false,
    clearIcon: 'mask-close',
    clearSize: '14',
    border: true,
    formatTrigger: 'onChange',
    rules: [],
    rows: null,
    errorMessage: '',
    errorMessageAlign: '',
    showWordLimit: false,
    autofocus: false,
    slotButton: null,
    slotInput: null,
};
const Input = forwardRef((props, ref) => {
    const { locale } = useConfig();
    const { children, type, name, defaultValue, placeholder, label, labelClass, labelWidth, labelAlign, colon, inputAlign, center, required, disabled, readonly, error, maxlength, leftIcon, leftIconSize, rightIcon, rightIconSize, clearable, clearIcon, clearSize, border, formatTrigger, rules, errorMessage, errorMessageAlign, showWordLimit, autofocus, style, className, rows, slotButton, slotInput, onChange, onBlur, onFocus, onClear, formatter, keypress, onClickInput, onClickLeftIcon, onClickRightIcon, onClick, iconClassPrefix, iconFontClassName, ...rest } = {
        ...defaultProps,
        ...props,
    };
    const inputPlaceholder = placeholder || locale.placeholder;
    const [inputValue, SetInputValue] = useState('');
    const [active, SetActive] = useState(false);
    const [classes, setClasses] = useState('');
    const getModelValue = () => String(inputValue ?? '');
    const inputRef = useRef(null);
    useEffect(() => {
        setClasses(inputClass);
        SetInputValue(defaultValue);
    }, [defaultValue]);
    useEffect(() => {
        if (inputValue) {
            updateValue(getModelValue());
            resetValidation();
        }
    }, [inputValue]);
    useImperativeHandle(ref, () => {
        return inputRef.current;
    });
    const inputClass = useCallback(() => {
        const prefixCls = 'nut-input';
        return [
            prefixCls,
            `${center ? 'center' : ''}`,
            `${disabled ? `${prefixCls}-disabled` : ''}`,
            `${required ? `${prefixCls}-required` : ''}`,
            `${error ? `${prefixCls}-error` : ''}`,
            `${border ? `${prefixCls}-border` : ''}`,
            `${slotButton || rightIcon ? `${prefixCls}-right-mark` : ''}`,
        ]
            .filter(Boolean)
            .join(' ');
    }, [disabled, required, error, border, slotButton, rightIcon, center]);
    // 样式状态重置
    useEffect(() => {
        setClasses(inputClass);
    }, [disabled, required, error, border, slotButton, rightIcon, center]);
    const updateValue = (value, trigger = 'onChange') => {
        let val = value;
        if (type === 'tel') {
            val = formatNumber(val, false, false);
        }
        if (['number', 'digit'].includes(type)) {
            val = formatNumber(val, true, true);
        }
        if (type === 'tel' && !formatter) {
            const regTel = /^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\d{8}$/;
            const regNumber = /[^-0-9]/g;
            val =
                !regTel.test(val) && val.length > 11
                    ? val.substring(0, 11)
                    : val.replace(regNumber, '');
        }
        if (formatter && trigger === formatTrigger) {
            val = formatter(val);
        }
        if (inputRef?.current?.value !== val) {
            inputRef.current.value = val;
        }
        SetInputValue(val);
    };
    const handleFocus = (event) => {
        const val = event.target.value;
        SetActive(true);
        onFocus && onFocus(val, event);
    };
    const handleInput = (event) => {
        let val = event.target.value;
        if (maxlength && val.length > Number(maxlength)) {
            val = val.slice(0, Number(maxlength));
        }
        updateValue(val, 'onChange');
        onChange && onChange(val, event);
    };
    const handleBlur = (event) => {
        setTimeout(() => {
            SetActive(false);
        }, 200);
        let val = event.target.value;
        if (maxlength && val.length > Number(maxlength)) {
            val = val.slice(0, Number(maxlength));
        }
        updateValue(val, 'onBlur');
        onBlur && onBlur(val, event);
    };
    const handleClickInput = (event) => {
        onClickInput && onClickInput(event);
    };
    const handleClickLeftIcon = (event) => {
        onClickLeftIcon && onClickLeftIcon(event);
    };
    const handleClickRightIcon = (event) => {
        onClickRightIcon && onClickRightIcon(event);
    };
    const resetValidation = () => {
    };
    const inputType = (type) => {
        if (type === 'tel') {
            return 'text';
        }
        return type;
    };
    const handleClear = (event) => {
        setTimeout(() => {
            updateValue('');
            onClear && onClear('', event);
        }, 50);
    };
    return (React__default.createElement("div", { className: `${classes}  ${className || ''}`, style: style, onClick: (e) => {
            onClick && onClick(e);
        } }, slotInput ? (React__default.createElement(React__default.Fragment, null,
        label ? (React__default.createElement("div", { className: `nut-input-label ${labelClass}`, style: { width: `${labelWidth}px`, textAlign: labelAlign } },
            React__default.createElement("div", { className: "label-string" },
                label,
                colon ? ':' : ''))) : null,
        React__default.createElement("div", { className: "nut-input-value" },
            React__default.createElement("div", { className: "nut-input-inner", onClick: (e) => {
                    handleClickInput(e);
                } }, slotInput)))) : (React__default.createElement(React__default.Fragment, null,
        leftIcon && leftIcon.length > 0 ? (React__default.createElement("div", { className: "nut-input-left-icon", onClick: (e) => {
                handleClickLeftIcon(e);
            } },
            React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, name: leftIcon, size: leftIconSize }))) : null,
        label ? (React__default.createElement("div", { className: `nut-input-label ${labelClass}`, style: { width: `${labelWidth}px`, textAlign: labelAlign } },
            React__default.createElement("div", { className: "label-string" },
                label,
                colon ? ':' : ''))) : null,
        React__default.createElement("div", { className: "nut-input-value" },
            React__default.createElement("div", { className: "nut-input-main-con" },
                React__default.createElement("div", { className: "nut-input-inner", onClick: (e) => {
                        handleClickInput(e);
                    } },
                    type === 'textarea' ? (React__default.createElement("textarea", { name: name, className: "input-text", ref: inputRef, style: {
                            textAlign: inputAlign,
                            height: `${Number(rows) * 24}px`,
                        }, maxLength: maxlength, placeholder: inputPlaceholder, disabled: disabled, readOnly: readonly, value: inputValue, autoFocus: autofocus, onBlur: (e) => {
                            handleBlur(e);
                        }, onFocus: (e) => {
                            handleFocus(e);
                        }, onInput: (e) => {
                            handleInput(e);
                        } })) : (React__default.createElement("input", { ...rest, name: name, className: "input-text", ref: inputRef, style: { textAlign: inputAlign }, type: inputType(type), maxLength: maxlength, placeholder: inputPlaceholder, disabled: disabled, readOnly: readonly, value: inputValue, autoFocus: autofocus, onBlur: (e) => {
                            handleBlur(e);
                        }, onFocus: (e) => {
                            handleFocus(e);
                        }, onInput: (e) => {
                            handleInput(e);
                        } })),
                    React__default.createElement(Icon, { style: {
                            display: clearable &&
                                !readonly &&
                                active &&
                                inputValue.length > 0
                                ? 'inline-flex'
                                : 'none',
                            alignItems: 'center',
                        }, classPrefix: iconClassPrefix, fontClassName: iconFontClassName, className: "nut-input-clear", name: clearIcon, size: clearSize, onClick: (e) => {
                            handleClear(e);
                        } })),
                rightIcon && rightIcon.length > 0 ? (React__default.createElement("div", { className: "nut-input-right-icon", onClick: (e) => {
                        handleClickRightIcon(e);
                    } },
                    React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, name: rightIcon, size: rightIconSize }))) : null,
                slotButton ? (React__default.createElement("div", { className: "nut-input-button" }, slotButton)) : null,
                showWordLimit && maxlength ? (React__default.createElement("div", { className: "nut-input-word-limit" },
                    React__default.createElement("span", { className: "nut-input-word-num" }, inputValue ? inputValue.length : 0),
                    "/",
                    maxlength)) : null),
            errorMessage ? (React__default.createElement("div", { className: "nut-input-error-message", style: {
                    textAlign: errorMessageAlign,
                } }, errorMessage)) : (React__default.createElement("div", null)))))));
});
Input.defaultProps = defaultProps;
Input.displayName = 'NutInput';

export { Input as I };
