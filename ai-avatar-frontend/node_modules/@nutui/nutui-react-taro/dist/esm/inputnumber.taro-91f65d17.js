import React__default, { useState, useEffect } from 'react';
import classNames from 'classnames';
import { I as Icon } from './icon.taro-296a1bec.js';
import { c as cn } from './bem-350c1702.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';

const defaultProps = {
    ...ComponentDefaults,
    disabled: false,
    buttonSize: '',
    min: 1,
    max: 9999,
    inputWidth: '',
    readonly: false,
    modelValue: 0,
    step: 1,
    decimalPlaces: 0,
    isAsync: false,
};
function pxCheck(value) {
    return Number.isNaN(Number(value)) ? String(value) : `${value}px`;
}
const InputNumber = (props) => {
    const { children, disabled, buttonSize, min, max, inputWidth, readonly, modelValue, decimalPlaces, step, isAsync, className, style, add, reduce, change, overlimit, blur, focus, onAdd, onReduce, onOverlimit, onBlurFuc, onFocus, onChangeFuc, iconClassPrefix, iconFontClassName, ...restProps } = {
        ...defaultProps,
        ...props,
    };
    const [inputValue, setInputValue] = useState(modelValue);
    useEffect(() => {
        setInputValue(modelValue);
    }, [modelValue]);
    const b = cn('inputnumber');
    const classes = classNames({
        [`${b('')}--disabled`]: disabled,
    }, className, b(''));
    const styles = {
        height: pxCheck(buttonSize),
        ...style,
    };
    const addAllow = (value = Number(inputValue)) => {
        return value < Number(max) && !disabled;
    };
    const reduceAllow = (value = Number(inputValue)) => {
        return value > Number(min) && !disabled;
    };
    const iconMinusClasses = classNames('nut-inputnumber__icon', {
        'nut-inputnumber__icon--disabled': !reduceAllow(),
    });
    const iconAddClasses = classNames('nut-inputnumber__icon', {
        'nut-inputnumber__icon--disabled': !addAllow(),
    });
    const fixedDecimalPlaces = (v) => {
        return Number(v).toFixed(Number(decimalPlaces));
    };
    const emitChange = (value, e) => {
        const outputValue = fixedDecimalPlaces(value);
        onChangeFuc && onChangeFuc(outputValue, e);
        change && change(outputValue, e);
        if (!isAsync) {
            setInputValue(outputValue);
        }
    };
    const reduceNumber = (e) => {
        onReduce && onReduce(e);
        reduce && reduce(e);
        if (reduceAllow()) {
            const outputValue = Number(inputValue) - Number(step);
            emitChange(outputValue, e);
        }
        else {
            onOverlimit && onOverlimit(e);
            overlimit && overlimit(e);
        }
    };
    const addNumber = (e) => {
        onAdd && onAdd(e);
        add && add(e);
        if (addAllow()) {
            const outputValue = Number(inputValue) + Number(step);
            emitChange(outputValue, e);
        }
        else {
            onOverlimit && onOverlimit(e);
            overlimit && overlimit(e);
        }
    };
    const changeValue = (e) => {
        const input = e.target;
        change && change(input.value, e);
        onChangeFuc && onChangeFuc(input.value, e);
        if (!isAsync) {
            setInputValue(input.value);
        }
    };
    const focusValue = (e) => {
        if (disabled)
            return;
        if (readonly)
            return;
        onFocus && onFocus(e);
        focus && focus(e);
    };
    const burValue = (e) => {
        if (disabled)
            return;
        if (readonly)
            return;
        const input = e.target;
        let value = +input.value;
        if (value < Number(min)) {
            value = Number(min);
        }
        else if (value > Number(max)) {
            value = Number(max);
        }
        emitChange(value, e);
        onBlurFuc && onBlurFuc(e);
        blur && blur(e);
    };
    return (React__default.createElement("div", { className: classes, style: styles, ...restProps },
        React__default.createElement("div", { className: "nut-input-minus" },
            React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, className: iconMinusClasses, size: buttonSize, name: "minus", onClick: reduceNumber })),
        React__default.createElement("input", { className: "nut-number-input", type: "digit", min: min, max: max, style: { width: pxCheck(inputWidth) }, disabled: disabled, readOnly: readonly, value: inputValue, onInput: changeValue, onBlur: burValue, onFocus: focusValue }),
        React__default.createElement("div", { className: "nut-input-add" },
            React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, className: iconAddClasses, size: buttonSize, name: "plus", onClick: addNumber }))));
};
InputNumber.defaultProps = defaultProps;
InputNumber.displayName = 'NutInputNumber';

export { InputNumber as I };
