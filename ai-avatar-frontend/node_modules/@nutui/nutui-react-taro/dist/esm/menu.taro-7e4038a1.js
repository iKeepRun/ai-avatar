import React__default, { useRef, useEffect, useState } from 'react';
import classNames from 'classnames';
import { I as Icon } from './icon.taro-296a1bec.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';

const defaultProps = {
    ...ComponentDefaults,
    className: '',
    style: {},
    activeColor: '#F2270C',
    closeOnClickOverlay: true,
    scrollFixed: false,
    lockScroll: true,
    titleIcon: '',
};
const Menu = (props) => {
    const { className, titleIcon, scrollFixed, lockScroll, closeOnClickOverlay, children, activeColor, iconClassPrefix, iconFontClassName, ...rest } = {
        ...defaultProps,
        ...props,
    };
    const parentRef = useRef(null);
    const onScroll = () => { };
    useEffect(() => {
        if (scrollFixed) {
            window.addEventListener('scroll', onScroll);
        }
        return () => window.removeEventListener('scroll', onScroll);
    }, []);
    const [itemShow, setItemShow] = useState([]);
    const [itemTitle, setItemTitle] = useState([]);
    const toggleItemShow = (index) => {
        itemShow[index] = !itemShow[index];
        const temp = itemShow.map((i, idx) => (idx === index ? i : false));
        setItemShow([...temp]);
    };
    const hideItemShow = (index) => {
        itemShow[index] = false;
        setItemShow([...itemShow]);
    };
    const updateTitle = (text, index) => {
        itemTitle[index] = text;
        setItemTitle([...itemTitle]);
    };
    const parent = () => {
        return parentRef;
    };
    const cloneChildren = () => {
        return React__default.Children.map(children, (child, index) => {
            return React__default.cloneElement(child, {
                showPopup: itemShow[index],
                orderKey: index,
                activeColor,
                parent: {
                    closeOnClickOverlay,
                    lockScroll,
                    toggleItemShow,
                    updateTitle,
                    hideItemShow,
                    parent,
                },
            });
        });
    };
    return (React__default.createElement("div", { className: `nut-menu ${className}`, ...rest, ref: parentRef },
        React__default.createElement("div", { className: "nut-menu-relative" },
            React__default.createElement("div", { className: `nut-menu__bar ${itemShow.includes(true) ? 'opened' : ''} ${className}` }, React__default.Children.toArray(children).map((child, index) => {
                if (!child)
                    return null;
                const { disabled, title, value, direction, options, className } = child.props;
                const currentTitle = options?.filter((option) => option.value === value);
                function finallyTitle() {
                    if (title)
                        return title;
                    if (itemTitle && itemTitle[index])
                        return itemTitle[index];
                    if (currentTitle && currentTitle[0] && currentTitle[0].text)
                        return currentTitle[0].text;
                    return '';
                }
                return (React__default.createElement("div", { className: `nut-menu__item ${classNames({
                        active: itemShow[index],
                        disabled,
                    })} ${className}`, style: { color: itemShow[index] ? activeColor : '' }, key: index, onClick: () => {
                        !disabled && toggleItemShow(index);
                    } },
                    React__default.createElement("div", { className: `nut-menu__title ${classNames({
                            active: itemShow[index],
                            disabled,
                        })}` },
                        React__default.createElement("div", { className: "nut-menu__title-text" }, finallyTitle()),
                        React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, className: "nut-menu__title-icon", size: "10", name: titleIcon ||
                                (direction === 'up' ? 'arrow-up' : 'down-arrow') }))));
            })),
            cloneChildren())));
};
Menu.defaultProps = defaultProps;
Menu.displayName = 'NutMenu';

export { Menu as M };
