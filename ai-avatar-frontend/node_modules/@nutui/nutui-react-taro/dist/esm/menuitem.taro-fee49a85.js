import React__default, { forwardRef, useState, useEffect, useMemo, useCallback, useImperativeHandle } from 'react';
import { getSystemInfoSync, usePageScroll } from '@tarojs/taro';
import { View } from '@tarojs/components';
import classNames from 'classnames';
import { CSSTransition } from 'react-transition-group';
import { I as Icon } from './icon.taro-296a1bec.js';
import { O as Overlay } from './overlay.taro-21e87fb1.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';

const defaultProps = {
    ...ComponentDefaults,
    className: '',
    style: {},
    columns: 1,
    direction: 'down',
    optionsIcon: 'Check',
    activeTitleClass: '',
    inactiveTitleClass: '',
    iconClassPrefix: 'nut-icon',
    fontClassName: 'nutui-iconfont',
    onChange: (value) => undefined,
};
const MenuItem = forwardRef((props, ref) => {
    const mergedProps = { ...defaultProps, ...props };
    const { style, options, value, columns, title, optionsIcon, direction, onChange, activeTitleClass, inactiveTitleClass, children, iconClassPrefix, iconFontClassName, } = {
        ...defaultProps,
        ...props,
    };
    const { activeColor, showPopup, parent, orderKey } = mergedProps;
    const [_showPopup, setShowPopup] = useState(showPopup);
    const [_value, setValue] = useState(value);
    useEffect(() => {
        setShowPopup(showPopup);
    }, [showPopup]);
    useEffect(() => {
        getParentOffset();
    }, [_showPopup]);
    const windowHeight = useMemo(() => getSystemInfoSync().windowHeight, []);
    const updateItemOffset = useCallback(() => {
        const p = parent.parent().current;
        p.getBoundingClientRect().then((rect) => {
            if (rect) {
                setPosition({
                    height: rect.height,
                    top: rect.top,
                });
            }
        });
    }, [direction, windowHeight]);
    usePageScroll(updateItemOffset);
    useImperativeHandle(ref, () => ({
        toggle: parent.toggleItemShow,
    }));
    const getIconCName = (optionVal, value) => {
        return classNames({
            [activeTitleClass]: optionVal === value,
            [inactiveTitleClass]: optionVal !== value,
        });
    };
    const setTitle = (text) => {
        if (!title) {
            parent.updateTitle(text, orderKey);
        }
    };
    const handleClick = (item) => {
        parent.toggleItemShow(orderKey);
        setTitle(item.text);
        setValue(item.value);
        onChange && onChange(item);
    };
    const [position, setPosition] = useState({
        top: 0,
        height: 0,
    });
    const getParentOffset = () => {
        setTimeout(async () => {
            const p = parent.parent().current;
            const rect = await p.getBoundingClientRect();
            setPosition({
                height: rect.height,
                top: rect.top,
            });
        });
    };
    const isShow = () => {
        if (_showPopup)
            return {};
        return { display: 'none' };
    };
    const getPosition = () => {
        return direction === 'down'
            ? { top: `${position.top + position.height}px` }
            : {
                bottom: `${getSystemInfoSync().windowHeight - position.top}px`,
                top: '0',
                height: 'initial',
            };
    };
    const placeholderStyle = () => {
        if (direction === 'down') {
            return {
                height: `${position.top + position.height}px`,
                ...isShow(),
                ...style,
            };
        }
        return {
            height: `${getSystemInfoSync().windowHeight - position.top}px`,
            top: 'auto',
            ...isShow(),
            ...style,
        };
    };
    return (React__default.createElement(React__default.Fragment, null,
        React__default.createElement(View, { className: `placeholder-element ${classNames({
                up: direction === 'up',
            })}`, style: placeholderStyle(), onClick: () => parent.toggleItemShow(orderKey) }),
        React__default.createElement(Overlay, { overlayClass: "nut-menu__overlay", style: getPosition(), lockScroll: parent.lockScroll, visible: _showPopup, closeOnClickOverlay: parent.closeOnClickOverlay, onClick: () => {
                parent.closeOnClickOverlay && parent.toggleItemShow(orderKey);
            } }),
        React__default.createElement(View, { className: direction === 'down'
                ? 'nut-menu-item__wrap'
                : 'nut-menu-item__wrap-up', style: {
                // ...getPosition(),
                ...isShow(),
            } },
            React__default.createElement(CSSTransition, { in: _showPopup, timeout: 100, classNames: direction === 'down' ? 'menu-item' : 'menu-item-up' },
                React__default.createElement(View, { className: "nut-menu-item__content" },
                    options?.map((item, index) => {
                        return (React__default.createElement(View, { className: `nut-menu-item__option ${classNames({
                                active: item.value === _value,
                            })}`, key: item.text, style: {
                                flexBasis: `${100 / columns}%`,
                            }, onClick: () => {
                                handleClick(item);
                            } },
                            item.value === _value ? (React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, className: getIconCName(item.value, value), name: optionsIcon, color: activeColor })) : null,
                            React__default.createElement(View, { className: getIconCName(item.value, value), style: {
                                    color: `${item.value === _value ? activeColor : ''}`,
                                } }, item.text)));
                    }),
                    children)))));
});
MenuItem.defaultProps = defaultProps;
MenuItem.displayName = 'NutMenuItem';

export { MenuItem as M };
