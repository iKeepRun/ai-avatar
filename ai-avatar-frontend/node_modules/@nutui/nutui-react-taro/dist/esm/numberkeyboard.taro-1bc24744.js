import React__default, { useState, useEffect } from 'react';
import classNames from 'classnames';
import { c as cn } from './bem-350c1702.js';
import { P as Popup } from './popup.taro-01676bff.js';
import { u as useConfig } from './configprovider.taro-8d71eb49.js';

const defaultProps = {
    confirmText: '',
    title: '',
    visible: false,
    overlay: false,
    type: 'default',
    customKey: [],
    className: '',
    randomKeys: false,
    popClass: '',
    onClose: () => { },
};
const NumberKeyboard = (props) => {
    const { locale } = useConfig();
    const { title, confirmText, visible, overlay, type, customKey, randomKeys, popClass, style, className, onChange, onDelete, onClose, } = props;
    const b = cn('numberkeyboard');
    const [show, setShow] = useState(visible);
    const [clickKeyIndex, setClickKeyIndex] = useState(undefined);
    const [keysList, setKeysList] = useState([]);
    useEffect(() => {
        setShow(visible);
    }, [visible]);
    const defaultKey = () => {
        let leftBottomKey = {
            id: 'lock',
            type: 'lock',
        };
        if (customKey) {
            const customKeys = Array.isArray(customKey)
                ? customKey
                : [customKey];
            if (customKeys.length > 0) {
                const newCustomKey = customKeys[0];
                leftBottomKey = {
                    id: newCustomKey,
                    type: 'custom',
                };
            }
        }
        return [
            ...getBasicKeys(),
            leftBottomKey,
            { id: 0, type: 'number' },
            { id: 'delete', type: 'delete' },
        ];
    };
    const getBasicKeys = () => {
        const keys = [];
        for (let i = 1; i <= 9; i++) {
            keys.push({ id: i, type: 'number' });
        }
        if (randomKeys) {
            return keys.sort(() => (Math.random() > 0.5 ? 1 : -1));
        }
        return keys;
    };
    const genCustomKeys = () => {
        const keys = getBasicKeys();
        if (!customKey)
            return [];
        let customKeys = Array.isArray(customKey) ? customKey : [customKey];
        if (customKeys.length > 2) {
            customKeys = [customKeys[0], customKeys[1]];
        }
        if (customKeys.length === 2 &&
            props.title &&
            props.type !== 'rightColumn') {
            customKeys = [customKeys[0]];
        }
        if (customKeys.length === 1) {
            if (props.title && props.type !== 'rightColumn') {
                keys.push({ id: customKeys[0], type: 'custom' }, { id: 0, type: 'number' }, { id: 'delete', type: 'delete' });
            }
            else {
                keys.push({ id: 0, type: 'number' }, { id: customKeys[0], type: 'custom' });
            }
        }
        else if (customKeys.length === 2) {
            keys.push({ id: customKeys[0], type: 'custom' }, { id: 0, type: 'number' }, { id: customKeys[1], type: 'custom' });
        }
        return keys;
    };
    useEffect(() => {
        if (props.type === 'rightColumn' || props.title !== '') {
            setKeysList(genCustomKeys());
        }
        else {
            setKeysList(defaultKey());
        }
    }, []);
    const onTouchstart = (item, event) => {
        event.stopPropagation();
        setClickKeyIndex(item.id);
        if (item.type === 'number' || item.type === 'custom') {
            onChange && onChange(item.id);
        }
        if (item.type === 'lock') {
            onClose && onClose();
        }
        if (item.type === 'delete') {
            onDelete && onDelete();
        }
    };
    const onTouchMove = (event) => {
        event.stopPropagation();
    };
    const onTouchEnd = (event) => {
        event.preventDefault();
        setClickKeyIndex(undefined);
    };
    return (React__default.createElement("div", null,
        React__default.createElement(Popup, { visible: show, overlay: overlay, position: "bottom", popClass: popClass, onClickOverlay: onClose, onClickCloseIcon: onClose, overlayStyle: { backgroundColor: 'rgba(0, 0, 0, 0)' } },
            React__default.createElement("div", { className: `${b()} ${className}`, style: { ...style } },
                title ? (React__default.createElement("div", { className: b('header') },
                    React__default.createElement("h3", { className: b('header__tit') }, title),
                    type === 'default' ? (React__default.createElement("span", { className: b('header__close'), onClick: onClose }, locale.done)) : null)) : null,
                React__default.createElement("div", { className: b('body') },
                    React__default.createElement("div", { className: b('body__keys') }, keysList?.map((item, index) => {
                        return (React__default.createElement("div", { key: index, className: classNames({
                                'key-board-wrapper': true,
                                'key-board-wrapper-large': item.id === 0 &&
                                    type === 'rightColumn' &&
                                    Array.isArray(customKey) &&
                                    customKey.length === 1,
                            }) },
                            React__default.createElement("div", { className: classNames({
                                    key: true,
                                    active: item.id === clickKeyIndex,
                                    lock: item.type === 'lock',
                                    delete: item.type === 'delete',
                                }), onTouchStart: (event) => onTouchstart(item, event), onTouchMove: onTouchMove, onTouchEnd: onTouchEnd },
                                item.type === 'number' || item.type === 'custom' ? (React__default.createElement("div", null, item.id)) : null,
                                item.type === 'lock' ? (React__default.createElement("img", { src: "https://img11.360buyimg.com/imagetools/jfs/t1/146371/38/8485/738/5f606425Eca239740/14f4b4f5f20d8a68.png", alt: "" })) : null,
                                item.type === 'delete' ? (React__default.createElement("img", { src: "https://img11.360buyimg.com/imagetools/jfs/t1/129395/8/12735/2030/5f61ac37E70cab338/fb477dc11f46056c.png", alt: "" })) : null)));
                    })),
                    type === 'rightColumn' ? (React__default.createElement("div", { className: b('sidebar') },
                        React__default.createElement("div", { className: "key-board-wrapper" },
                            React__default.createElement("div", { className: classNames({
                                    key: true,
                                    active: clickKeyIndex === 'delete',
                                }), onTouchStart: (event) => onTouchstart({ id: 'delete', type: 'delete' }, event), onTouchMove: onTouchMove, onTouchEnd: onTouchEnd },
                                React__default.createElement("img", { src: "https://img11.360buyimg.com/imagetools/jfs/t1/129395/8/12735/2030/5f61ac37E70cab338/fb477dc11f46056c.png", alt: "" }))),
                        React__default.createElement("div", { className: "key-board-wrapper key-board-finish", onClick: onClose },
                            React__default.createElement("div", { className: classNames({
                                    key: true,
                                    finish: true,
                                    activeFinsh: clickKeyIndex === 'finish',
                                }) }, confirmText || locale.done)))) : null)))));
};
NumberKeyboard.defaultProps = defaultProps;
NumberKeyboard.displayName = 'NutNumberKeyboard';

export { NumberKeyboard as N };
