import React__default, { useState, useEffect } from 'react';
import { u as useConfig } from './configprovider.taro-8d71eb49.js';
import { c as cn } from './bem-350c1702.js';

const defaultProps = {
    defaultValue: 1,
    mode: 'multi',
    prevText: '',
    nextText: '',
    pageCount: '',
    totalItems: '0',
    itemsPerPage: '10',
    showPageSize: '5',
    forceEllipses: false,
    className: '',
    pageNodeRender: (item) => {
        return item.text;
    },
};
const Pagination = (props) => {
    const { locale } = useConfig();
    ({ ...defaultProps, ...props });
    const { modelValue, mode, prevText, nextText, pageCount, totalItems, itemsPerPage, showPageSize, onChange, updatecurrent, forceEllipses, pageNodeRender, defaultValue, className, ...rest } = props;
    const [currentPage, setCurrent] = useState(1);
    const [pages, setPages] = useState([]);
    const [countRef, setCountRef] = useState(Number(pageCount));
    const paginationBem = cn('pagination');
    // 计算页面的数量
    const computedCountRef = () => {
        const num = Number(pageCount) || Math.ceil(Number(totalItems) / Number(itemsPerPage));
        return Number.isNaN(num) ? 1 : Math.max(1, num);
    };
    // 生成pages数组，用来遍历
    const computedPages = (_currentPage, _countRef) => {
        if (mode === 'simple')
            return [];
        const items = [];
        const pageCount = _countRef || countRef; // 总的页面数量
        const pageSize = Number(showPageSize); // 展示的页面个数
        const _current = _currentPage || Number(currentPage); // 当前页
        let startPage = 1;
        let endPage = pageCount;
        const partialShow = pageCount > pageSize;
        if (partialShow) {
            // 选中的page在展示的page中间
            startPage = Math.max(_current - Math.floor(pageSize / 2), 1);
            endPage = startPage + pageSize - 1;
            if (endPage > pageCount) {
                endPage = pageCount;
                startPage = endPage - pageSize + 1;
            }
        }
        // 遍历生成数组
        for (let i = startPage; i <= endPage; i++) {
            const page = setPage(i, i, _current === i);
            items.push(page);
        }
        // 判断是否有折叠
        if (partialShow && pageSize > 0 && forceEllipses) {
            if (startPage > 1) {
                const prevPage = setPage(startPage - 1, '...');
                items.unshift(prevPage);
            }
            if (endPage < pageCount) {
                const nextPage = setPage(endPage + 1, '...');
                items.push(nextPage);
            }
        }
        return items;
    };
    // 点击选择page
    const selectPage = (curPage, isSelect) => {
        if (curPage > countRef || curPage < 1)
            return;
        // 是否传入modelValue
        if (!('modelValue' in props)) {
            setCurrent(Number(curPage));
            if (curPage !== currentPage) {
                setPages(computedPages(curPage));
            }
        }
        if (curPage !== currentPage) {
            updatecurrent && updatecurrent(curPage);
        }
        if (isSelect)
            onChange && onChange(curPage);
    };
    // set page 对象
    const setPage = (number, text, active) => {
        return { number, text, active };
    };
    useEffect(() => {
        // 初始化 判断是否传入值 计算 当前页，总页数，生成子节点
        let currentValue = props.defaultValue || 1;
        if ('modelValue' in props) {
            currentValue = Number(props.modelValue);
        }
        const pageCount = computedCountRef();
        setCountRef(pageCount);
        setPages(computedPages(currentValue, pageCount));
    }, []);
    if ('modelValue' in props) {
        const current = props.modelValue ? Number(props.modelValue) : 1;
        if (current !== currentPage) {
            setCurrent(current);
            setPages(computedPages(Number(current)));
        }
    }
    return (React__default.createElement("div", { className: `${paginationBem('')} ${className}`, ...rest },
        React__default.createElement("div", { className: `${paginationBem('prev')}  ${mode === 'multi' ? '' : 'simple-border'} ${currentPage === 1 ? 'disabled' : ''}`, onClick: (e) => selectPage(Number(currentPage) - 1, true) }, prevText || locale.pagination.prev),
        mode === 'multi' ? (React__default.createElement("div", { className: `${paginationBem('contain')}` }, pages.map((item, index) => {
            return (React__default.createElement("div", { key: `${index}pagination`, className: `${paginationBem('item')} ${item.active ? 'active' : ''}`, onClick: (e) => !item.active ? selectPage(item.number, true) : '' }, pageNodeRender ? pageNodeRender(item) : item.text));
        }))) : (''),
        mode === 'simple' ? (React__default.createElement("div", { className: `${paginationBem('contain')}` },
            React__default.createElement("div", { className: `${paginationBem('simple')}` },
                currentPage,
                "/",
                countRef))) : (''),
        React__default.createElement("div", { className: `${paginationBem('next')}  ${Number(currentPage) >= countRef ? 'disabled' : ''}`, onClick: (e) => selectPage(Number(currentPage) + 1, true) }, nextText || locale.pagination.next)));
};
Pagination.defaultProps = defaultProps;
Pagination.displayName = 'NutPagination';

export { Pagination as P };
