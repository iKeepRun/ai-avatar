import React__default, { useRef, useState, useEffect } from 'react';
import { I as Icon } from './icon.taro-296a1bec.js';
import { O as Overlay } from './overlay.taro-21e87fb1.js';
import { g as getRectByTaro } from './useClientRect-1f8ed1fe.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';

/**
 * 过滤ref
 */
function fillRef(ref, node) {
    if (typeof ref === 'function') {
        ref(node);
    }
    else if (typeof ref === 'object' && ref && 'current' in ref) {
        ref.current = node;
    }
}
/**
 * 将ref合并到一个ref函数中以支持ref传递
 */
function composeRef(...refs) {
    return (node) => {
        refs.forEach((ref) => {
            fillRef(ref, node);
        });
    };
}
class Trigger extends React__default.Component {
    fireEvents(type, e) {
        const childCallback = this.props.children.props[type];
        if (childCallback) {
            childCallback(e);
        }
        const callback = this.props[type];
        if (callback) {
            callback(e);
        }
    }
    render() {
        const { children, className = '' } = this.props;
        const child = React__default.Children.only(children);
        const newChildProps = {
            key: 'trigger',
        };
        if (child && child.props && child.props.className) {
            newChildProps.className = className;
        }
        const cloneProps = {
            ...newChildProps,
        };
        cloneProps.ref = composeRef(this.props.forwardedRef, child.ref);
        const trigger = React__default.cloneElement(child, cloneProps);
        return trigger;
    }
}

const defaultProps = {
    ...ComponentDefaults,
    list: [],
    theme: 'light',
    location: 'bottom',
    visible: false,
    offset: 20,
    className: '',
    onClick: (e) => { },
    onChoose: (item, index) => { },
};
const Popover = (props) => {
    const { children, list, theme, location, visible, offset, className, style, onClick, onChoose, iconClassPrefix, iconFontClassName, ...reset } = {
        ...defaultProps,
        ...props,
    };
    const goodItem = useRef(null);
    setTimeout(async () => {
        if (goodItem.current) {
            const res = await getRectByTaro(goodItem.current);
            setElWidth(res?.width);
            setElHeight(res?.height);
        }
    });
    const [classes, setClasses] = useState('');
    const [elWidth, setElWidth] = useState(0);
    const [elHeight, setElHeight] = useState(0);
    const [popoverContent, setPopoverContent] = useState('');
    const [popoverArrow, setPopoverArrow] = useState('');
    useEffect(() => {
        setClasses(classesSelf());
        setPopoverContent(popoverContentSelf());
        setPopoverArrow(popoverArrowSelf());
    }, [list, theme]);
    const getStyle = () => {
        const offNumer = Number(offset) ? Number(offset) : 0;
        const style = {};
        if (location.includes('top')) {
            style.bottom = `${elHeight + offNumer}px`;
        }
        else if (location.includes('right')) {
            style.left = `${elWidth + offNumer}px`;
        }
        else if (location.includes('left')) {
            style.right = `${elWidth + offNumer}px`;
        }
        else {
            style.top = `${elHeight + offNumer}px`;
        }
        return style;
    };
    const classesSelf = () => {
        const prefixCls = 'nut-popover';
        return `${prefixCls} ${theme ? `${prefixCls}--${theme}` : ''}`;
    };
    const popoverContentSelf = () => {
        const prefixCls = 'popover-content';
        return `${prefixCls}-show ${prefixCls} ${location ? `${prefixCls}--${location}` : ''}`;
    };
    const filter = () => {
        const ms = ['top', 'bottom', 'left', 'right'];
        return ms.filter((m) => location.includes(m))[0];
    };
    const popoverArrowSelf = () => {
        const prefixCls = 'popover-arrow';
        return `${prefixCls} ${prefixCls}-${filter()} ${location ? `${prefixCls}--${location}` : ''}`;
    };
    const handleClick = (e) => {
        if (props.onClick) {
            props.onClick(e);
        }
    };
    const handleChoose = (item, index) => {
        if (!item.disabled) {
            onChoose(item, index);
        }
    };
    return (React__default.createElement(React__default.Fragment, null,
        React__default.createElement("div", { className: `${classes} ${className}`, style: { ...style }, ...reset },
            React__default.createElement(Trigger, { forwardedRef: goodItem },
                React__default.createElement("div", { onClick: (e) => handleClick(e) },
                    Array.isArray(children) ? children[0] : children,
                    visible ? (React__default.createElement("div", { className: `${popoverContent}`, style: getStyle() },
                        React__default.createElement("div", { className: `${popoverArrow}` }),
                        Array.isArray(children) ? children[1] : '',
                        React__default.createElement("div", null,
                            ' ',
                            list.map((item, i) => {
                                return (React__default.createElement("div", { key: item.name, className: `popover-menu-item ${item.disabled ? 'disabled' : ''}`, onClick: () => {
                                        handleChoose(item, i);
                                    } },
                                    item.icon ? (React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, className: "popover-menu-item-img", name: item.icon })) : (''),
                                    React__default.createElement("div", { className: "popover-menu-item-name" }, item.name)));
                            })))) : null))),
        visible ? (React__default.createElement(Overlay, { visible: visible, onClick: (e) => handleClick(e), style: { background: 'transparent' } })) : ('')));
};
Popover.defaultProps = defaultProps;
Popover.displayName = 'NutPopover';

export { Popover as P };
