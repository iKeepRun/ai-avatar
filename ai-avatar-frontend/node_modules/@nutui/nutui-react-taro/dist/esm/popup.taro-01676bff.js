import React__default, { useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { CSSTransition } from 'react-transition-group';
import classNames from 'classnames';
import { d as defaultOverlayProps, O as Overlay } from './overlay.taro-21e87fb1.js';
import { I as Icon } from './icon.taro-296a1bec.js';
import { c as cn } from './bem-350c1702.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';

const defaultProps = {
    ...ComponentDefaults,
    position: 'center',
    transition: '',
    style: {},
    popClass: '',
    closeable: false,
    closeIconPosition: 'top-right',
    closeIcon: 'close',
    closeIconSize: '12px',
    destroyOnClose: true,
    teleport: null,
    overlay: true,
    round: false,
    onOpen: () => { },
    onClose: () => { },
    onOpened: (e) => { },
    onClosed: (e) => { },
    onClickOverlay: (e) => { },
    onClickCloseIcon: (e) => { },
    ...defaultOverlayProps,
};
let _zIndex = 2000;
const Popup = (props) => {
    const { children, visible, overlay, closeOnClickOverlay, overlayStyle, overlayClass, zIndex, lockScroll, duration, closeable, closeIconPosition, closeIcon, style, transition, round, position, popClass, className, destroyOnClose, teleport, onOpen, onClose, onClickOverlay, onClickCloseIcon, onOpened, onClosed, onClick, iconClassPrefix, iconFontClassName, closeIconSize, } = props;
    const [index, setIndex] = useState(zIndex || _zIndex);
    const [innerVisible, setInnerVisible] = useState(visible);
    const [showChildren, setShowChildren] = useState(true);
    const [transitionName, setTransitionName] = useState('');
    const b = cn('popup');
    const baseStyle = {
        zIndex: index,
        animationDuration: `${duration}s`,
    };
    const overlayStyles = {
        ...overlayStyle,
        ...baseStyle,
    };
    const popStyles = {
        ...style,
        ...baseStyle,
    };
    const classes = classNames({
        round,
        [`nut-popup-${position}`]: true,
        [`${popClass}`]: true,
        [`${className || ''}`]: true,
    }, b(''));
    const closeClasses = classNames({
        'nut-popup__close-icon': true,
        [`nut-popup__close-icon--${closeIconPosition}`]: true,
    });
    const open = () => {
        if (!innerVisible) {
            setInnerVisible(true);
            setIndex(++_zIndex);
        }
        if (destroyOnClose) {
            setShowChildren(true);
        }
        onOpen && onOpen();
    };
    const close = () => {
        if (innerVisible) {
            setInnerVisible(false);
            if (destroyOnClose) {
                setTimeout(() => {
                    setShowChildren(false);
                    onClose && onClose();
                }, Number(duration) * 1000);
            }
        }
    };
    const onHandleClickOverlay = (e) => {
        if (closeOnClickOverlay) {
            onClickOverlay && onClickOverlay(e);
            close();
        }
    };
    const onHandleClick = (e) => {
        onClick && onClick(e);
    };
    const onHandleClickCloseIcon = (e) => {
        onClickCloseIcon && onClickCloseIcon(e);
        close();
    };
    const onHandleOpened = (e) => {
        onOpened && onOpened(e);
    };
    const onHandleClosed = (e) => {
        onClosed && onClosed(e);
    };
    const resolveContainer = (getContainer) => {
        const container = typeof getContainer === 'function' ? getContainer() : getContainer;
        return container || document.body;
    };
    const renderToContainer = (getContainer, node) => {
        if (getContainer) {
            const container = resolveContainer(getContainer);
            return createPortal(node, container);
        }
        return node;
    };
    const renderPop = () => {
        return (React__default.createElement(CSSTransition, { classNames: transitionName, unmountOnExit: true, timeout: 500, in: innerVisible, onEntered: onHandleOpened, onExited: onHandleClosed },
            React__default.createElement("div", { style: popStyles, className: classes, onClick: onHandleClick },
                showChildren ? children : '',
                closeable ? (React__default.createElement("div", { className: closeClasses, onClick: onHandleClickCloseIcon },
                    React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, name: closeIcon, size: closeIconSize }))) : (''))));
    };
    const renderNode = () => {
        return (React__default.createElement(React__default.Fragment, null, overlay ? (React__default.createElement(React__default.Fragment, null,
            React__default.createElement(Overlay, { style: overlayStyles, overlayClass: overlayClass, visible: innerVisible, closeOnClickOverlay: closeOnClickOverlay, zIndex: zIndex, lockScroll: lockScroll, duration: duration, onClick: onHandleClickOverlay }),
            renderPop())) : (React__default.createElement(React__default.Fragment, null, renderPop()))));
    };
    useEffect(() => {
        visible && open();
        !visible && close();
    }, [visible]);
    useEffect(() => {
        setTransitionName(transition || `nut-popup-slide-${position}`);
    }, [position]);
    return React__default.createElement(React__default.Fragment, null, renderToContainer(teleport, renderNode()));
};
Popup.defaultProps = defaultProps;
Popup.displayName = 'NutPopup';

export { Popup as P };
