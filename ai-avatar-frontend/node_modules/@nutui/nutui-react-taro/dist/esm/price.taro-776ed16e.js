import React__default from 'react';
import { c as cn } from './bem-350c1702.js';

const defaultProps = {
    price: 0,
    needSymbol: true,
    symbol: '&yen;',
    decimalDigits: 2,
    thousands: false,
    position: 'before',
    size: 'large',
    className: '',
};
const Price = (props) => {
    const { price, needSymbol, symbol, decimalDigits, thousands, position, size, className, ...rest } = {
        ...defaultProps,
        ...props,
    };
    const b = cn('price');
    const replaceSpecialChar = (url) => {
        url = url.replace(/&quot;/g, '"');
        url = url.replace(/&amp;/g, '&');
        url = url.replace(/&lt;/g, '<');
        url = url.replace(/&gt;/g, '>');
        url = url.replace(/&nbsp;/g, ' ');
        url = url.replace(/&yen;/g, 'ï¿¥');
        return url;
    };
    const showSymbol = () => {
        return { __html: needSymbol ? replaceSpecialChar(symbol) : '' };
    };
    const checkPoint = (price) => {
        return String(price).indexOf('.') > 0;
    };
    const formatThousands = (num) => {
        if (Number(num) === 0) {
            num = 0;
        }
        if (checkPoint(num)) {
            num = Number(num).toFixed(decimalDigits);
            num =
                typeof num.split('.') === 'string' ? num.split('.') : num.split('.')[0];
        }
        else {
            num = num.toString();
        }
        if (thousands) {
            return (num || 0).toString().replace(/(\d)(?=(?:\d{3})+$)/g, '$1,');
        }
        return num;
    };
    const formatDecimal = (decimalNum) => {
        if (Number(decimalNum) === 0) {
            decimalNum = 0;
        }
        if (checkPoint(decimalNum)) {
            decimalNum = Number(decimalNum).toFixed(decimalDigits);
            decimalNum =
                typeof decimalNum.split('.') === 'string'
                    ? 0
                    : decimalNum.split('.')[1] || 0;
        }
        else {
            decimalNum = 0;
        }
        const result = `0.${decimalNum}`;
        const resultFixed = Number(result).toFixed(decimalDigits);
        return String(resultFixed).substring(2, resultFixed.length);
    };
    const renderSymbol = () => {
        return (React__default.createElement("div", { className: `${b('symbol')} ${b(`symbol-${size}`)}`, dangerouslySetInnerHTML: showSymbol() }));
    };
    return (React__default.createElement("div", { className: `${b()} ${className}`, ...rest },
        needSymbol && position === 'before' ? renderSymbol() : null,
        React__default.createElement("div", { className: `${b('integer')} ${b(`integer-${size}`)}` }, formatThousands(price)),
        decimalDigits !== 0 ? (React__default.createElement("div", { className: `${b('decimal')} ${b(`decimal-${size}`)}` }, ".")) : null,
        React__default.createElement("div", { className: `${b('decimal')} ${b(`decimal-${size}`)}` }, formatDecimal(price)),
        needSymbol && position === 'after' ? renderSymbol() : null));
};
Price.defaultProps = defaultProps;
Price.displayName = 'NutPrice';

export { Price as P };
