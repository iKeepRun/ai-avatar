import React__default, { useState, useEffect, useCallback, useContext } from 'react';
import { I as Icon } from './icon.taro-296a1bec.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';
import { c as cn } from './bem-350c1702.js';

const radioContext = {
    onChange: (val) => { },
};
var RadioContext = React__default.createContext(radioContext);

const defaultProps$1 = {
    value: null,
    textPosition: 'right',
    onChange: (value) => { },
    direction: 'vertical',
    options: [],
};
const RadioGroup = React__default.forwardRef((props, ref) => {
    const { children } = { ...defaultProps$1, ...props };
    cn('RadioGroup');
    const { className, value, onChange, textPosition, direction, options, ...rest } = props;
    const [val2State, setVal2State] = useState(value);
    // useImperativeHandle(ref, () => ({
    //   toggleAll(state: boolean) {
    //     console.log(state)
    //     if (state === false) {
    //       setInnerValue([])
    //     } else {
    //       const childrenLabel: string[] = []
    //       React.Children.map(children, (child) => {
    //         const childProps = (child as any).props
    //         childrenLabel.push(childProps.label || (child as any).children)
    //       })
    //       setInnerValue(childrenLabel)
    //     }
    //   },
    // }))
    useEffect(() => {
        setVal2State(value);
    }, [value]);
    // function handleChildChange(state: boolean, label: string) {
    //   if (innerValue) {
    //     let clippedValue = []
    //     if (state) {
    //       clippedValue = [...innerValue, label]
    //     } else {
    //       innerValue?.splice(innerValue?.indexOf(label), 1)
    //       clippedValue = [...innerValue]
    //     }
    //     setInnerValue(clippedValue)
    //     onChange && onChange(clippedValue)
    //   }
    // }
    function validateChildChecked(child) {
        if (val2State === null)
            return false;
        return val2State === child.props.value;
    }
    function validateChecked(value) {
        if (val2State === null)
            return false;
        return val2State === value;
    }
    function cloneChildren() {
        return React__default.Children.map(children, (child, index) => {
            const childChecked = validateChildChecked(child);
            if (child.type.displayName !== 'NutRadio') {
                return React__default.cloneElement(child);
            }
            return React__default.cloneElement(child, {
                textPosition,
                checked: childChecked,
                // onChange: handleChildChange,
            });
        });
    }
    const renderOptionsChildren = useCallback(() => {
        return options?.map(({ label, value, disabled, onChange, ...rest }) => {
            const childChecked = validateChecked(value);
            return (React__default.createElement(Radio, { key: value?.toString(), children: label, value: value, disabled: disabled, onChange: onChange, ...rest, textPosition: textPosition, checked: childChecked }));
        });
    }, [val2State, options]);
    return (React__default.createElement(RadioContext.Provider, { value: {
            onChange: (val) => {
                setVal2State(val);
                onChange && onChange(val);
            },
        } },
        React__default.createElement("div", { className: `nut-radiogroup nut-radiogroup--${props.direction} ${className || ''}`, ...rest }, options?.length ? renderOptionsChildren() : cloneChildren())));
});
RadioGroup.defaultProps = defaultProps$1;
RadioGroup.displayName = 'NutRadioGroup';

const defaultProps = {
    ...ComponentDefaults,
    className: '',
    style: {},
    disabled: false,
    checked: false,
    shape: 'round',
    value: '',
    textPosition: 'right',
    iconName: 'check-normal',
    iconActiveName: 'check-checked',
    iconSize: 18,
    onChange: (e) => { },
};
const Radio = (props) => {
    const { children } = {
        ...defaultProps,
        ...props,
    };
    const { className, disabled, checked, shape, textPosition, value, iconName, iconActiveName, iconSize, onChange, iconClassPrefix, iconFontClassName, ...rest } = props;
    const componentName = 'nut-radio';
    const [checkedStatement, setCheckedStatement] = useState(checked);
    const [valueStatement, setValueStatement] = useState(value);
    const [disabledStatement, setDisabledStatement] = useState(disabled);
    const context = useContext(RadioContext);
    useEffect(() => {
        setDisabledStatement(disabled);
        setValueStatement(value);
        setCheckedStatement(checked);
    }, [disabled, value, checked]);
    const renderLabel = () => {
        return (React__default.createElement("div", { className: `${componentName}__label ${disabledStatement ? `${componentName}__label--disabled` : ''}` }, children));
    };
    const renderButton = () => {
        return (React__default.createElement("div", { className: `${componentName}__button ${!disabledStatement &&
                checkedStatement &&
                `${componentName}__button--active`} ${disabledStatement ? `${componentName}__button--disabled` : ''}` }, children));
    };
    const color = () => {
        if (disabledStatement) {
            return 'nut-radio__icon--disable';
        }
        if (checkedStatement) {
            return 'nut-radio__icon';
        }
        return 'nut-radio__icon--unchecked';
    };
    const renderIcon = () => {
        const { iconName, iconSize, iconActiveName } = props;
        return (React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, name: !disabledStatement && checkedStatement ? iconActiveName : iconName, size: iconSize, className: color() }));
    };
    const reverseState = textPosition === 'left';
    const renderRadioItem = () => {
        if (shape === 'button') {
            return renderButton();
        }
        if (reverseState) {
            return (React__default.createElement(React__default.Fragment, null,
                renderLabel(),
                renderIcon()));
        }
        return (React__default.createElement(React__default.Fragment, null,
            renderIcon(),
            renderLabel()));
    };
    const handleClick = (e) => {
        if (disabledStatement || checkedStatement)
            return;
        setCheckedStatement(!checkedStatement);
        onChange && onChange(e);
        context && context.onChange(valueStatement);
    };
    return (React__default.createElement("div", { className: `nut-radio ${className} ${reverseState ? `${componentName}--reverse` : ''}`, onClick: handleClick, ...rest }, renderRadioItem()));
};
Radio.defaultProps = defaultProps;
Radio.displayName = 'NutRadio';
Radio.RadioGroup = RadioGroup;

export { Radio as R, RadioGroup as a };
