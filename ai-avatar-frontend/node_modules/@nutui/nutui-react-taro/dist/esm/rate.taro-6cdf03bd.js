import React__default, { useState, useEffect } from 'react';
import classNames from 'classnames';
import { c as cn } from './bem-350c1702.js';
import { I as Icon } from './icon-296a1bec.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';

const defaultProps = {
    ...ComponentDefaults,
    count: 5,
    modelValue: 0,
    minimizeValue: 0,
    iconSize: 18,
    activeColor: '',
    voidColor: '',
    checkedIcon: 'star-fill-n',
    uncheckedIcon: 'star-n',
    disabled: false,
    readonly: false,
    allowHalf: false,
    spacing: 14,
};
const Rate = (props) => {
    const { className, style, count, modelValue, minimizeValue, iconSize, activeColor, voidColor, checkedIcon, uncheckedIcon, disabled, readonly, allowHalf, spacing, onChange, iconClassPrefix, iconFontClassName, } = {
        ...defaultProps,
        ...props,
    };
    const b = cn('rate');
    const bi = cn('rate-item');
    const [countArray, setCountArray] = useState([1, 2, 3, 4, 5]);
    const [score, setScore] = useState(0);
    useEffect(() => {
        const tmp = [];
        for (let i = 1; i <= Number(count); i++) {
            tmp.push(i);
        }
        setCountArray(tmp);
    }, [count]);
    useEffect(() => {
        setScore(Math.max(Number(modelValue), Number(minimizeValue)));
    }, [modelValue]);
    const pxCheck = (value) => {
        return Number.isNaN(Number(value)) ? String(value) : `${value}px`;
    };
    const onClick = (e, index) => {
        e.preventDefault();
        e.stopPropagation();
        if (disabled || readonly)
            return;
        let value = 0;
        if (!(index === 1 && score === index)) {
            value = index;
        }
        value = Math.max(value, Number(minimizeValue));
        setScore(value);
        onChange && onChange(value);
    };
    const onHalfClick = (event, n) => {
        event.preventDefault();
        event.stopPropagation();
        const value = Math.max(Number(minimizeValue), n - 0.5);
        setScore(value);
        onChange && onChange(value);
    };
    return (React__default.createElement("div", { className: classNames(b(), className), style: style }, countArray.map((n) => {
        return (React__default.createElement("div", { className: bi(), key: n, onClick: (event) => onClick(event, n), style: { marginRight: pxCheck(spacing) } },
            React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, size: iconSize, className: classNames(bi('icon'), {
                    [bi('icon--disabled')]: disabled || n > score,
                }), name: n <= score ? checkedIcon : uncheckedIcon, color: n <= score ? activeColor : voidColor }),
            allowHalf && score > n - 1 && (React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, onClick: (event) => onHalfClick(event, n), className: `${bi('icon')} ${bi('icon--half')}`, color: n <= score ? activeColor : voidColor, size: iconSize, name: checkedIcon }))));
    })));
};
Rate.defaultProps = defaultProps;
Rate.displayName = 'NutRate';

export { Rate as R };
