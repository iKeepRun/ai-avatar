import React__default, { useRef, useState, useEffect } from 'react';
import { getEnv } from '@tarojs/taro';
import { c as cn } from './bem-350c1702.js';
import { u as useConfig } from './configprovider.taro-8d71eb49.js';
import { I as Icon } from './icon.taro-296a1bec.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';

const defaultProps = {
    ...ComponentDefaults,
    placeholder: '',
    shape: 'square',
    disabled: false,
    maxLength: 9999,
    clearable: true,
    clearIconSize: '12px',
    align: 'left',
    readonly: true,
    autoFocus: false,
    label: '',
    leftinIcon: React__default.createElement(Icon, { name: "search", size: "12" }),
};
const SearchBar = (props) => {
    const searchbarBem = cn('searchbar');
    const { locale } = useConfig();
    const searchRef = useRef(null);
    const [value, setValue] = useState(() => props.value);
    const { placeholder, shape, className, disabled, maxLength, clearable, clearIconSize, align, readOnly, autoFocus, label, actionText, leftinIcon, rightinIcon, leftoutIcon, rightoutIcon, onChange, onFocus, onBlur, onClear, onCancel, onSearch, onClickInput, onClickLeftinIcon, onClickLeftoutIcon, onClickRightinIcon, onClickRightoutIcon, iconClassPrefix, iconFontClassName, } = {
        ...defaultProps,
        ...props,
    };
    const alignClass = `${align}`;
    const forceFocus = () => {
        const searchSelf = searchRef.current;
        searchSelf && searchSelf.focus();
    };
    const change = (event) => {
        const { value } = event.target;
        onChange && onChange?.(value, event);
        setValue(value);
        value === '' && forceFocus();
    };
    const focus = (event) => {
        const { value } = event.target;
        onFocus && onFocus?.(value, event);
    };
    const blur = (event) => {
        const searchSelf = searchRef.current;
        searchSelf && searchSelf.blur();
        const { value } = event.target;
        onBlur && onBlur?.(value, event);
    };
    useEffect(() => {
        setValue(props.value);
    }, [props.value]);
    useEffect(() => {
        autoFocus && forceFocus();
    }, [autoFocus]);
    const renderField = () => {
        return (React__default.createElement("input", { className: `${searchbarBem('input')}  ${searchbarBem(alignClass)} ${shape === 'round' ? searchbarBem('round') : ''} ${clearable ? searchbarBem('input-clear') : ''}`, ref: searchRef, style: { ...props.style }, value: value || '', placeholder: placeholder || locale.placeholder, disabled: disabled, readOnly: readOnly, maxLength: maxLength, onKeyPress: onKeypress, onChange: (e) => change(e), onFocus: (e) => focus(e), onBlur: (e) => blur(e), onClick: (e) => clickInput(e) }));
    };
    const clickInput = (e) => {
        onClickInput && onClickInput(e);
    };
    const renderLeftinIcon = () => {
        if (!leftinIcon)
            return null;
        return (React__default.createElement("div", { className: `${searchbarBem('leftin-icon')} ${searchbarBem('icon')}`, onClick: (e) => clickLeftIcon('in-left', e) }, leftinIcon));
    };
    const renderLeftoutIcon = () => {
        if (!leftoutIcon)
            return null;
        return (React__default.createElement("div", { className: `${searchbarBem('leftout-icon')}`, onClick: (e) => clickLeftIcon('out-left', e) }, leftoutIcon));
    };
    const clickLeftIcon = (flag, event) => {
        if (flag === 'in-left') {
            onClickLeftinIcon && onClickLeftinIcon(value, event);
        }
        else {
            onClickLeftoutIcon && onClickLeftoutIcon(value, event);
        }
    };
    const renderRightinIcon = () => {
        if (!rightinIcon)
            return null;
        return (React__default.createElement("div", { className: `${searchbarBem('rightin-icon')} ${searchbarBem('icon')}`, onClick: (e) => clickRightIcon('in-right', e) }, rightinIcon));
    };
    const renderRightoutIcon = () => {
        if (!rightoutIcon)
            return null;
        return (React__default.createElement("div", { className: `${searchbarBem('rightout-icon')}`, onClick: (e) => clickRightIcon('out-right', e) }, rightoutIcon));
    };
    const clickRightIcon = (flag, event) => {
        if (flag === 'in-left') {
            onClickRightinIcon && onClickRightinIcon(value, event);
        }
        else {
            onClickRightoutIcon && onClickRightoutIcon(value, event);
        }
    };
    const handleClear = () => {
        return (React__default.createElement("div", { className: `${searchbarBem('clear')} ${rightinIcon ? 'pos-right' : ''}`, onClick: (e) => clearaVal(e) },
            React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, name: "circle-close", size: clearIconSize, color: "#555" })));
    };
    const clearaVal = (event) => {
        if (disabled || readOnly) {
            return;
        }
        setValue('');
        onClear && onClear(event);
        forceFocus();
    };
    const renderRightLabel = () => {
        if (actionText) {
            return (React__default.createElement("div", { className: searchbarBem('action-text'), onClick: search }, actionText));
        }
        return null;
    };
    const onKeypress = (e) => {
        if (e.key === 'Enter' || e.keyCode === 13) {
            if (typeof e.cancelable !== 'boolean' || e.cancelable) {
                e.preventDefault();
            }
            onSearch && onSearch(value);
        }
    };
    const search = () => {
        onSearch && onSearch(value);
    };
    const renderLabel = () => {
        if (label) {
            return React__default.createElement("div", { className: searchbarBem('label') }, label);
        }
        return null;
    };
    const envClass = () => {
        return getEnv() === 'WEB' ? 'nut-searchbar-taro' : '';
    };
    return (React__default.createElement("div", { className: `${searchbarBem()} ${envClass()} ${disabled ? searchbarBem('disabled') : ''}  ${className || ''}`, style: { ...props.style, background: props.background } },
        renderLeftoutIcon(),
        renderLabel(),
        React__default.createElement("div", { className: `${searchbarBem('content')}`, style: { background: props.inputBackground } },
            renderLeftinIcon(),
            React__default.createElement("div", { className: "nut-searchbar__input-box" }, renderField()),
            renderRightinIcon(),
            clearable && value && handleClear()),
        renderRightoutIcon(),
        renderRightLabel()));
};
SearchBar.defaultProps = defaultProps;
SearchBar.displayName = 'NutSearchBar';

export { SearchBar as S };
