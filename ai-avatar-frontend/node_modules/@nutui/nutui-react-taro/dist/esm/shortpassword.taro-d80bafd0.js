import React__default, { useRef, useState, useEffect } from 'react';
import { c as cn } from './bem-350c1702.js';
import { P as Popup } from './popup.taro-01676bff.js';
import { I as Icon } from './icon.taro-296a1bec.js';
import { u as useConfig } from './configprovider.taro-8d71eb49.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';

const defaultProps = {
    ...ComponentDefaults,
    title: '',
    desc: '',
    tips: '',
    visible: false,
    modelValue: '',
    errorMsg: '',
    noButton: true,
    closeOnClickOverlay: true,
    length: 6,
    className: '',
    autoFocus: false,
    onChange: (value) => { },
    onOk: (value) => { },
    onCancel: () => { },
    onClose: () => { },
    onTips: () => { },
    onComplete: (value) => { },
};
const ShortPassword = (props) => {
    const { locale } = useConfig();
    const { title, desc, tips, visible, modelValue, errorMsg, noButton, closeOnClickOverlay, length, style, className, onChange, onOk, onTips, onCancel, onClose, onComplete, iconClassPrefix, iconFontClassName, autoFocus, ...reset } = props;
    const b = cn('shortpassword');
    const textInput = useRef(null);
    const range = (val) => {
        return Math.min(Math.max(4, val), 6);
    };
    const [innerVisible, setInnerVisible] = useState(visible);
    const [comLen, setComLen] = useState(range(Number(length)));
    const [inputValue, setInputValue] = useState('');
    useEffect(() => {
        setInnerVisible(visible);
    }, [visible]);
    useEffect(() => {
        if (typeof modelValue !== 'undefined') {
            setInputValue(modelValue);
        }
    }, [modelValue]);
    const changeValue = (e) => {
        let inputValue = e.target.value;
        if (String(inputValue).length > comLen) {
            inputValue = inputValue.slice(0, comLen);
        }
        setInputValue(inputValue);
        if (String(inputValue).length === comLen) {
            onComplete && onComplete(inputValue);
        }
        onChange && onChange(inputValue);
    };
    const systemStyle = () => {
        const u = navigator.userAgent;
        const isAndroid = u.indexOf('Android') > -1 || u.indexOf('Linux') > -1; // g
        const isIOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); // ios终端
        let style = {};
        if (isIOS) {
            style = {
                paddingRight: '1200px',
            };
        }
        if (isAndroid) {
            style = {
                opacity: 0,
                zIndex: 10,
            };
        }
        return style;
    };
    const focus = () => {
        if (textInput.current) {
            textInput.current.focus();
        }
    };
    const sure = () => {
        onOk && onOk(inputValue);
    };
    return (React__default.createElement("div", null,
        React__default.createElement(Popup, { style: {
                padding: '32px 24px 28px 24px',
                borderRadius: '12px',
                textAlign: 'center',
            }, visible: innerVisible, closeable: true, "close-on-click-overlay": closeOnClickOverlay, onClickOverlay: onClose, onClickCloseIcon: onClose },
            React__default.createElement("div", { className: `${b()} ${className}`, style: { ...style }, ...reset },
                React__default.createElement("div", { className: b('title') }, title || locale.shortpassword.title),
                React__default.createElement("div", { className: b('subtitle') }, desc || locale.shortpassword.desc),
                React__default.createElement("div", { className: b('input') },
                    React__default.createElement("input", { ref: textInput, className: b('input-real'), type: "number", style: systemStyle(), maxLength: 6, pattern: "[0-9]*", value: inputValue, autoFocus: autoFocus, onChange: (e) => changeValue(e) }),
                    React__default.createElement("div", { className: b('input-site') }),
                    React__default.createElement("div", { className: b('input-fake'), onClick: () => focus() }, [...new Array(comLen).keys()].map((item, index) => {
                        return (React__default.createElement("div", { className: b('input-fake__li'), key: index }, String(inputValue).length > index ? (React__default.createElement("div", { className: b('input-fake__li__icon') })) : null));
                    }))),
                React__default.createElement("div", { className: b('message') },
                    React__default.createElement("div", { className: b('message__error') }, errorMsg),
                    tips || locale.shortpassword.tips ? (React__default.createElement("div", { className: b('message__forget') },
                        React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, className: "icon", size: "11px", name: "tips" }),
                        React__default.createElement("div", { onClick: onTips }, tips || locale.shortpassword.tips))) : null),
                !noButton ? (React__default.createElement("div", { className: b('footer') },
                    React__default.createElement("div", { className: b('footer__cancel'), onClick: onCancel }, locale.cancel),
                    React__default.createElement("div", { className: b('footer__sure'), onClick: () => sure() }, locale.confirm))) : null))));
};
ShortPassword.defaultProps = defaultProps;
ShortPassword.displayName = 'NutShortPassword';

export { ShortPassword as S };
