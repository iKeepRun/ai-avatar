import React__default, { useState, useEffect } from 'react';
import classNames from 'classnames';
import { I as Icon } from './icon.taro-296a1bec.js';
import { C as ComponentDefaults } from './typings-b9828dba.js';

const defaultProps = {
    ...ComponentDefaults,
    type: 'default',
    color: '',
    textColor: '',
    plain: false,
    round: false,
    mark: false,
    closeable: false,
    iconSize: '12px',
    prefixCls: 'nut-tag',
    onClose: (e) => { },
    onClick: (e) => { },
};
const Tag = (props) => {
    const { className, style, color, plain, type, round, prefixCls, children, mark, closeable, iconSize, textColor, onClick, onClose, iconClassPrefix, iconFontClassName, } = {
        ...defaultProps,
        ...props,
    };
    const [btnName, setBtnName] = useState('');
    const [isTagShow, setIsTagShow] = useState(true);
    useEffect(() => {
        setBtnName(classes());
    }, [
        type,
        color,
        textColor,
        plain,
        round,
        mark,
        closeable,
        iconSize,
        prefixCls,
        onClick,
        onClose,
        className,
    ]);
    const classes = () => {
        const prefixCls = 'nut-tag';
        return classNames({
            [prefixCls]: true,
            [`${prefixCls}--${type}`]: type,
            [`${prefixCls}--plain`]: plain,
            [`${prefixCls}--round`]: round,
            [`${prefixCls}--mark`]: mark,
            [`${prefixCls}--close`]: closeable,
            [`${className}`]: className,
        });
    };
    const handleClick = (e) => {
        if (props.onClick) {
            props.onClick(e);
        }
    };
    // 综合考虑 textColor、color、plain 组合使用时的效果
    const getStyle = () => {
        const style = {};
        // 标签内字体颜色
        if (textColor) {
            style.color = textColor;
        }
        else if (color && plain) {
            style.color = color;
        }
        // 标签背景与边框颜色
        if (plain) {
            style.background = '#fff';
            style.borderColor = color;
        }
        else if (color) {
            style.background = color;
        }
        return style;
    };
    return (React__default.createElement(React__default.Fragment, null, closeable ? (isTagShow && (React__default.createElement("div", { className: btnName, style: { ...style, ...getStyle() }, onClick: (e) => handleClick(e) },
        children && React__default.createElement("span", { className: "nut-tag-text" }, children),
        React__default.createElement(Icon, { classPrefix: iconClassPrefix, fontClassName: iconFontClassName, className: "_icon", name: "close", size: iconSize, onClick: (e) => {
                setIsTagShow(false);
                if (props.onClose) {
                    props.onClose(e);
                }
            } })))) : (React__default.createElement("div", { className: btnName, style: { ...style, ...getStyle() }, onClick: (e) => handleClick(e) }, children && React__default.createElement("span", { className: "nut-tag-text" }, children)))));
};
Tag.defaultProps = defaultProps;
Tag.displayName = 'NutTag';

export { Tag as T };
