import React__default, { useState, useRef, useEffect } from 'react';
import { u as useConfig } from './configprovider.taro-8d71eb49.js';
import { c as cn } from './bem-350c1702.js';

const defaultProps = {
    defaultValue: '',
    textAlign: 'left',
    limitshow: false,
    maxlength: '',
    rows: '',
    placeholder: '',
    readonly: false,
    disabled: false,
    autosize: false,
};
const TextArea = (props) => {
    const { locale } = useConfig();
    const { className, defaultValue, textAlign, limitshow, maxlength, rows, placeholder, readonly, disabled, autosize, style, onChange, onBlur, onFocus, } = { ...defaultProps, ...props };
    const textareaBem = cn('textarea');
    const [inputValue, SetInputValue] = useState('');
    const compositingRef = useRef(false);
    const [, updateState] = React__default.useState({});
    const forceUpdate = React__default.useCallback(() => updateState({}), []);
    useEffect(() => {
        let initValue = defaultValue;
        if (initValue && maxlength && [...initValue].length > Number(maxlength)) {
            initValue = initValue.substring(0, Number(maxlength));
        }
        SetInputValue(initValue);
    }, [defaultValue]);
    const textChange = (event) => {
        if (disabled)
            return;
        if (readonly)
            return;
        const text = event.detail ? event.detail : event.target;
        if (maxlength &&
            [...text.value].length > Number(maxlength) &&
            !compositingRef.current) {
            text.value = text.value.substring(0, Number(maxlength));
        }
        if (text.value === inputValue) {
            forceUpdate();
        }
        else {
            SetInputValue(text.value);
        }
        onChange && onChange(text.value, event);
    };
    const textFocus = (event) => {
        if (disabled)
            return;
        if (readonly)
            return;
        onFocus && onFocus(event);
    };
    const textBlur = (event) => {
        if (disabled)
            return;
        if (readonly)
            return;
        const text = event.detail ? event.detail : event.target;
        onChange && onChange(text.value, event);
        onBlur && onBlur(event);
    };
    const startComposing = () => {
        compositingRef.current = true;
    };
    const endComposing = () => {
        compositingRef.current = false;
    };
    return (React__default.createElement("div", { className: `${textareaBem()} ${disabled ? textareaBem('disabled') : ''} ${className || ''}` },
        React__default.createElement("textarea", { className: textareaBem('textarea'), style: {
                textAlign,
                resize: `${autosize ? 'vertical' : 'none'}`,
                ...style,
            }, readOnly: disabled || readonly, value: inputValue, onInput: (e) => {
                textChange(e);
            }, onChange: (e) => {
                textChange(e);
            }, onBlur: (e) => {
                textBlur(e);
            }, onFocus: (e) => {
                textFocus(e);
            }, onCompositionEnd: (e) => endComposing(), onCompositionStart: (e) => startComposing(), rows: rows, maxLength: maxlength < 0 ? 0 : maxlength, placeholder: placeholder || locale.placeholder }),
        limitshow ? (React__default.createElement("div", { className: textareaBem('limit') },
            [...inputValue].length,
            "/",
            maxlength < 0 ? 0 : maxlength)) : null));
};
TextArea.defaultProps = defaultProps;
TextArea.displayName = 'NutTextArea';

export { TextArea as T };
