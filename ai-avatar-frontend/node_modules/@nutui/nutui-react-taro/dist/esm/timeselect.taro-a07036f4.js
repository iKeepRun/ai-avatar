import React__default, { useState, useEffect } from 'react';
import { P as Popup } from './popup.taro-01676bff.js';
import { T as TimePannel } from './timepannel.taro-d6e40180.js';
import { T as TimeDetail } from './timedetail.taro-5b2f2269.js';
import { c as cn } from './bem-350c1702.js';
import { u as useConfig } from './configprovider.taro-8d71eb49.js';

const defaultProps = {
    className: '',
    style: {},
    visible: false,
    height: '20%',
    multiple: false,
    currentKey: 0,
    currentTime: [],
    title: '取件时间',
    dates: [],
    times: [],
};
const TimeSelect = (props) => {
    useConfig();
    const { visible, className, height, title, currentKey, currentTime, dates, times, multiple, select, pannelChange, timeChange, onSelect, onPannelChange, onTimeChange, } = {
        ...defaultProps,
        ...props,
    };
    const [activeKey, setActiveKey] = useState(currentKey);
    const [activeTime, setActiveTime] = useState(currentTime.length
        ? currentTime
        : [
            {
                key: currentKey,
                list: [],
            },
        ]);
    const [popVisible, setPopVisible] = useState(visible);
    const popStyle = {
        width: '100%',
        height,
    };
    const b = cn('timeselect');
    // popup 的关闭回调, 执行 select 函数更改外部 visible
    const closeFun = () => {
        if (onSelect) {
            onSelect(activeTime);
        }
        else if (select) {
            select(activeTime);
        }
    };
    // 选择配送时间回调
    const handleSelectTime = (time) => {
        let curTimeData = {};
        let curIndex = -1;
        for (let i = 0; i < activeTime.length; i++) {
            if (String(activeTime[i].key) === String(activeKey)) {
                curTimeData = activeTime[i];
                curIndex = i;
                break;
            }
        }
        const curTimeIndex = curTimeData.list.findIndex((item) => String(item) === String(time));
        if (curTimeIndex === -1) {
            curTimeData.list.push(time);
        }
        else {
            curTimeData.list.splice(curTimeIndex, 1);
        }
        const resultTimeData = [...activeTime];
        resultTimeData.splice(curIndex, 1, curTimeData);
        setActiveTime(resultTimeData);
        if (onTimeChange) {
            onTimeChange(time, resultTimeData);
        }
        else if (timeChange) {
            timeChange(time, resultTimeData);
        }
    };
    // 选择日期的回调
    const handleChange = (pannelKey) => {
        const resultTimeData = [...activeTime];
        if (String(pannelKey) !== String(activeKey)) {
            setActiveKey?.(pannelKey);
            if (multiple) {
                const curTimeDataIndex = activeTime.findIndex((item) => String(item.key) === String(pannelKey));
                if (curTimeDataIndex === -1) {
                    resultTimeData.push({
                        key: pannelKey,
                        list: [],
                    });
                    setActiveTime(resultTimeData);
                }
            }
            else {
                setActiveTime([
                    {
                        key: pannelKey,
                        list: [],
                    },
                ]);
            }
        }
        if (onPannelChange) {
            onPannelChange(pannelKey, resultTimeData);
        }
        else if (pannelChange) {
            pannelChange(pannelKey, resultTimeData);
        }
    };
    // 选中的日期增加 active 类名
    const getTimePannelClass = (dataItem) => {
        if (String(dataItem['pannel-key']) === String(activeKey)) {
            return 'nut-timepannel-active';
        }
        return '';
    };
    // 根据外部传入 visible 进行组件的显隐展示
    useEffect(() => {
        setPopVisible(visible);
    }, [visible]);
    return (React__default.createElement(React__default.Fragment, null,
        React__default.createElement(Popup, { closeable: true, round: true, visible: popVisible, position: "bottom", style: popStyle, onClose: () => {
                closeFun();
            } },
            React__default.createElement("div", { className: `${b()} ${className || ''}` },
                React__default.createElement("div", { className: "nut-timeselect__title" }, title),
                React__default.createElement("div", { className: "nut-timeselect__content" },
                    React__default.createElement("div", { className: "nut-timeselect__content-left" }, dates.map((dataItem, index) => (React__default.createElement(TimePannel, { date: dataItem.date, className: getTimePannelClass(dataItem), key: String(dataItem['pannel-key'] || index), curKey: String(dataItem['pannel-key'] || index), change: handleChange })))),
                    React__default.createElement(TimeDetail, { times: times, currentKey: String(activeKey), currentTime: activeTime, select: handleSelectTime }))))));
};
TimeSelect.defaultProps = defaultProps;
TimeSelect.displayName = 'NutTimeSelect';

export { TimeSelect as T };
