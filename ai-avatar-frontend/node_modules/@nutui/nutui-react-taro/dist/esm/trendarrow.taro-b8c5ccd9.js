import React__default, { useRef } from 'react';
import { c as cn } from './bem-350c1702.js';
import { I as Icon } from './icon.taro-296a1bec.js';

const defaultProps = {
    rate: 0,
    digits: 2,
    showSign: false,
    showZero: false,
    arrowLeft: false,
    syncTextColor: true,
    textColor: '#333',
    riseColor: '#fa2c19',
    dropColor: '#64b578',
    iconSize: '12px',
    upIconName: 'triangle-up',
    downIconName: 'triangle-down',
    className: '',
};
const TrendArrow = (props) => {
    const { rate, digits, showSign, showZero, arrowLeft, syncTextColor, textColor, riseColor, dropColor, iconSize, upIconName, downIconName, className, children, ...rest } = { ...defaultProps, ...props };
    const b = cn('trendarrow');
    const handleClick = () => { };
    const rateTrend = useRef(rate > 0);
    const myFixed = (num, digit = 2) => {
        if (Object.is(parseFloat(num), NaN)) {
            return console.log(`传入的值：${num}不是一个数字`);
        }
        num = parseFloat(num);
        // eslint-disable-next-line no-restricted-properties
        const numPow = Math.pow(10, digit);
        return (Math.round((num + Number.EPSILON) * numPow) / numPow).toFixed(digit);
    };
    const calcStyle = (() => {
        const arrowColor = rateTrend.current ? riseColor : dropColor;
        const textEquArrowColor = syncTextColor ? arrowColor : textColor;
        const style = {
            color: rate === 0 ? textColor : textEquArrowColor,
        };
        return style;
    })();
    const calcRate = (() => {
        rateTrend.current = rate > 0;
        const absRate = Math.abs(rate);
        if (!showZero && rate === 0) {
            return '--';
        }
        const resultRate = `${
        // eslint-disable-next-line no-nested-ternary
        showSign && rate !== 0 ? (rateTrend.current ? '+' : '-') : ''}${myFixed(Number(absRate), digits)}%`;
        return resultRate;
    })();
    const calcIconProps = (() => {
        const iconProps = {
            name: rateTrend.current ? upIconName : downIconName,
            color: rateTrend.current ? riseColor : dropColor,
            size: iconSize,
        };
        return iconProps;
    })();
    const renderContent = (arrowLeft) => {
        const classNameSuffix = !arrowLeft ? 'icon-after' : 'icon-before';
        return (React__default.createElement("span", { className: `${b(classNameSuffix)} ${b('rate')}`, style: calcStyle }, calcRate));
    };
    return (React__default.createElement("div", { className: `${b()} ${className}`, ...rest, onClick: handleClick },
        !arrowLeft && renderContent(!arrowLeft),
        children || (React__default.createElement(React__default.Fragment, null, Number(rate) !== 0 && (React__default.createElement(Icon, { size: calcIconProps.size, name: calcIconProps.name, color: calcIconProps.color })))),
        arrowLeft && renderContent(!arrowLeft)));
};
TrendArrow.defaultProps = defaultProps;
TrendArrow.displayName = 'NutTrendArrow';

export { TrendArrow as T };
