import * as React from 'react';
import React__default, { CSSProperties, ReactNode, FunctionComponent, ReactHTML, ReactElement, MouseEvent as MouseEvent$1, MouseEventHandler, HTMLInputTypeAttribute, ChangeEvent, FocusEvent, RefObject, Component } from 'react';
import { ButtonProps as ButtonProps$1, ITouchEvent } from '@tarojs/components';
import Taro, { InnerAudioContext } from '@tarojs/taro';

interface BasicComponent {
    className?: string;
    style?: CSSProperties;
    iconFontClassName?: string;
    iconClassPrefix?: string;
    children?: ReactNode;
}

type OmitMiniProgramButtonProps = Omit<ButtonProps$1, 'size' | 'type' | 'onClick'>;
interface ButtonProps extends BasicComponent, OmitMiniProgramButtonProps {
    className: string;
    color: string;
    shape: ButtonShape;
    plain: boolean;
    loading: boolean;
    disabled: boolean;
    style: React__default.CSSProperties;
    type: ButtonType;
    size: ButtonSize;
    block: boolean;
    icon: string;
    iconSize: string | number;
    children: any;
    onClick: (e: MouseEvent) => void;
}
type ButtonType = 'default' | 'primary' | 'info' | 'success' | 'warning' | 'danger';
type ButtonSize = 'large' | 'normal' | 'small';
type ButtonShape = 'square' | 'round';
declare const Button: FunctionComponent<Partial<ButtonProps>>;

interface CellProps extends BasicComponent {
    title: ReactNode;
    subTitle: ReactNode;
    desc: string;
    descTextAlign: string;
    isLink: boolean;
    icon: string;
    roundRadius: string | number;
    url: string;
    to: string;
    replace: boolean;
    center: boolean;
    size: string;
    className: string;
    iconSlot: ReactNode;
    linkSlot: ReactNode;
    onClick: (event: React__default.MouseEvent<HTMLDivElement, MouseEvent>) => void;
}
declare const Cell: FunctionComponent<Partial<CellProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'title'>>;

interface CellGroupProps {
    title: ReactNode;
    desc: ReactNode;
    titleSlot: ReactNode;
    descSlot: ReactNode;
    className: string;
    children?: ReactNode;
}
declare const CellGroup: FunctionComponent<Partial<CellGroupProps>>;

interface BaseLang {
    save: string;
    confirm: string;
    cancel: string;
    done: string;
    noData: string;
    placeholder: string;
    select: string;
    video: {
        errorTip: string;
        clickRetry: string;
    };
    fixednav: {
        activeText: string;
        unActiveText: string;
    };
    infiniteloading: {
        pullRefreshText: string;
        loadText: string;
        loadMoreText: string;
    };
    pagination: {
        prev: string;
        next: string;
    };
    range: {
        rangeText: string;
    };
    calendaritem: {
        weekdays: Array<string>;
        end: string;
        start: string;
        confirm: string;
        title: string;
        monthTitle: Function;
        today: string;
        loadPreviousMonth: string;
        noEarlierMonth: string;
    };
    shortpassword: {
        title: string;
        desc: string;
        tips: string;
    };
    uploader: {
        ready: string;
        readyUpload: string;
        waitingUpload: string;
        uploading: string;
        success: string;
        error: string;
        deleteWord: string;
    };
    countdown: {
        day: string;
        hour: string;
        minute: string;
        second: string;
    };
    address: {
        selectRegion: string;
        deliveryTo: string;
        chooseAnotherAddress: string;
    };
    signature: {
        reSign: string;
        unSupportTpl: string;
    };
    ecard: {
        chooseText: string;
        otherValueText: string;
        placeholder: string;
    };
    timeselect: {
        pickupTime: string;
    };
    sku: {
        buyNow: string;
        buyNumber: string;
        addToCard: string;
    };
    skuheader: {
        skuId: string;
    };
    addresslist: {
        addAddress: string;
    };
    comment: {
        complaintsText: string;
        additionalReview: Function;
        additionalImages: Function;
    };
    searchbar: {
        basePlaceholder: string;
        text: string;
        test: string;
        title1: string;
        title2: string;
        title3: string;
        title4: string;
        title5: string;
        title6: string;
    };
    audio: {
        back: string;
        forward: string;
        pause: string;
        start: string;
        mute: string;
        tips: string;
    };
    datepicker: {
        year: string;
        month: string;
        day: string;
        hour: string;
        min: string;
        seconds: string;
    };
    pullToRefresh: {
        pullingText: string;
        canReleaseText: string;
        refreshingText: string;
        completeText: string;
    };
    watermark: {
        errorCanvasTips: string;
    };
}

interface ConfigProviderProps {
    locale: BaseLang;
    theme?: Record<string, string>;
    [key: string]: any;
}
declare const ConfigProvider: FunctionComponent<Partial<ConfigProviderProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface IconProps {
    name: string;
    size: string | number;
    classPrefix: string;
    color: string;
    tag: keyof ReactHTML;
    onClick: (e: MouseEvent) => void;
    fontClassName: string;
    className: string;
    style: React__default.CSSProperties;
    children: React__default.ReactNode;
}
declare function Icon<T>(props: Partial<IconProps> & T): ReactElement;
declare namespace Icon {
    var defaultProps: IconProps;
    var displayName: string;
}

interface ImageProps {
    className: string;
    style: React__default.CSSProperties;
    src: string;
    fit: ImageFit;
    position: ImagePosition;
    alt: string;
    width: string;
    height: string;
    round: boolean;
    radius: string | number;
    showError: boolean;
    showLoading: boolean;
    slotLoding: React__default.ReactNode;
    slotError: React__default.ReactNode | string;
    onClick?: (e: MouseEvent) => void;
    onLoad?: () => void;
    onError?: () => void;
}
type ImageFit = 'contain' | 'cover' | 'fill' | 'none' | 'scale-down' | string;
type ImagePosition = 'center' | 'top' | 'right' | 'bottom' | 'left' | string;
declare const Image: FunctionComponent<Partial<ImageProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'onClick' | 'onLoad' | 'onError'>>;

interface OverlayProps {
    zIndex: number;
    duration: number;
    overlayClass: string;
    overlayStyle: React__default.CSSProperties;
    closeOnClickOverlay: boolean;
    visible: boolean;
    lockScroll: boolean;
    onClick: (event: ITouchEvent) => void;
}
declare const Overlay: FunctionComponent<Partial<OverlayProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'onClick'>>;

type Teleport = HTMLElement | (() => HTMLElement) | null;
interface PopupProps extends OverlayProps, BasicComponent {
    position: string;
    transition: string;
    style: React__default.CSSProperties;
    popClass: string;
    closeable: boolean;
    closeIconPosition: string;
    closeIcon: string;
    closeIconSize?: string | number;
    destroyOnClose: boolean;
    teleport: Teleport;
    overlay: boolean;
    round: boolean;
    onOpen: () => void;
    onClose: () => void;
    onOpened: (e: HTMLElement) => void;
    onClosed: (e: HTMLElement) => void;
    onClickOverlay: (e: ITouchEvent) => void;
    onClickCloseIcon: (e: MouseEvent$1) => void;
}
declare const Popup: FunctionComponent<Partial<PopupProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'onClick'>>;

type EventType$1 = 'row' | 'col';
interface ColProps {
    span: string | number;
    offset: string | number;
    gutter: string | number;
    onClick: (e: any, type: EventType$1) => void;
}
declare const Col: FunctionComponent<Partial<ColProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'onClick'>>;

type ContentPositionType = 'left' | 'center' | 'right';
type DirectionType = 'horizontal' | 'vertical';
interface DividerProps {
    contentPosition: ContentPositionType;
    dashed: boolean;
    hairline: boolean;
    styles?: React__default.CSSProperties;
    className?: string;
    direction?: DirectionType;
}
declare const Divider: FunctionComponent<Partial<DividerProps> & React__default.HTMLAttributes<HTMLDivElement>>;

type GridDirection$1 = 'horizontal' | 'vertical';
interface GridItemProps extends BasicComponent {
    text: string | ReactNode;
    fontSize: string | number;
    color: string;
    icon: string | ReactNode;
    iconSize?: string | number;
    iconColor?: string;
    parentIconSize?: string | number;
    parentIconColor?: string;
    index: number;
    columnNum: string | number;
    border: boolean;
    gutter: string | number;
    center: boolean;
    square: boolean;
    reverse: boolean;
    direction: GridDirection$1;
}
declare const GridItem: FunctionComponent<Partial<GridItemProps> & React__default.HTMLAttributes<HTMLDivElement>>;

type GridDirection = 'horizontal' | 'vertical';
interface GridProps {
    columnNum: string | number;
    border: boolean;
    gutter: string | number;
    center: boolean;
    square: boolean;
    reverse: boolean;
    direction: GridDirection;
    className?: string;
    iconSize?: string | number;
    iconColor?: string;
    style?: CSSProperties;
    onClick: (item: GridItemProps, index: number) => void;
}
declare const Grid: FunctionComponent<Partial<GridProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'onClick'>>;

interface LayoutProps {
}
declare const Layout: FunctionComponent<Partial<LayoutProps> & React__default.HTMLAttributes<HTMLDivElement>>;

type EventType = 'row' | 'col';
interface RowProps {
    type: string;
    justify: string;
    align: string;
    wrap: string;
    gutter: string | number;
    onClick: (e: any, type: EventType) => void;
}
declare const Row: FunctionComponent<Partial<RowProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'onClick'>>;

interface StickyProps extends BasicComponent {
    container?: React__default.RefObject<HTMLElement>;
    position?: 'top' | 'bottom';
    className?: string;
    top?: number;
    bottom?: number;
    zIndex?: number;
    children: React__default.ReactNode;
    onChange?: (val: boolean) => void;
}
declare const Sticky: FunctionComponent<StickyProps>;

declare const elevatorContext: React__default.Context<ElevatorData>;
interface ElevatorProps {
    height: number | string;
    acceptKey: string;
    indexList: any[];
    isSticky: boolean;
    spaceHeight: number;
    titleHeight: number;
    className: string;
    style: React__default.CSSProperties;
    children: React__default.ReactNode;
    onClickItem: (key: string, item: ElevatorData) => void;
    onClickIndex: (key: string) => void;
}
interface ElevatorData {
    name: string;
    id: number | string;
    [key: string]: string | number;
}
declare const Elevator: FunctionComponent<Partial<ElevatorProps> & React__default.HTMLAttributes<HTMLDivElement>> & {
    Context: typeof elevatorContext;
};

type Direction$1 = 'right' | 'left';
type Position$2 = {
    top?: string;
    bottom?: string;
};
interface FixedNavProps extends BasicComponent {
    fixednavClass: string;
    visible: boolean;
    overlay: boolean;
    navList: Array<any>;
    activeText: string;
    unActiveText: string;
    position: Position$2;
    type: Direction$1;
    onChange: (v: any) => void;
    onSelected: (item: any, e: any) => void;
    slotList: React__default.ReactNode;
    slotBtn: React__default.ReactNode;
}
declare const FixedNav: FunctionComponent<Partial<FixedNavProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface IndicatorProps {
    size: number;
    current: number;
    block: boolean;
    align: 'left' | 'right' | 'center';
    fillZero: boolean;
    vertical: boolean;
}
declare const Indicator: FunctionComponent<Partial<IndicatorProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface MenuProps extends BasicComponent {
    className: string;
    style: React__default.CSSProperties;
    activeColor: string;
    closeOnClickOverlay: boolean;
    scrollFixed: boolean | string | number;
    lockScroll: boolean;
    titleIcon: string;
    children: React__default.ReactNode;
}
declare const Menu: FunctionComponent<Partial<MenuProps>>;

interface OptionItem {
    text: string;
    value: string | number;
}
interface MenuItemProps extends BasicComponent {
    className: string;
    style: React__default.CSSProperties;
    title: React__default.ReactNode;
    options: OptionItem[];
    disabled: boolean;
    columns: number;
    optionsIcon: string;
    direction: string;
    activeTitleClass: string;
    inactiveTitleClass: string;
    fontClassName: string;
    iconClassPrefix: string;
    value: string | number;
    onChange: (event: any) => void;
    children: React__default.ReactNode;
}
declare const MenuItem: React__default.ForwardRefExoticComponent<Partial<MenuItemProps> & React__default.RefAttributes<unknown>>;

interface NavBarProps$1 extends BasicComponent {
    leftShow: boolean;
    title: string;
    titIcon: string;
    leftText: string;
    desc: string;
    className: string;
    fixed: boolean;
    safeAreaInsetTop: boolean;
    border: boolean;
    placeholder: boolean;
    zIndex: number | string;
    style: React__default.CSSProperties;
    onClickTitle: (e: React__default.MouseEvent<HTMLDivElement>) => void;
    onClickIcon: (e: React__default.MouseEvent<HTMLDivElement>) => void;
    onClickBack: (e: React__default.MouseEvent<HTMLElement>) => void;
    onClickRight: (e: React__default.MouseEvent<HTMLDivElement>) => void;
    children?: React__default.ReactNode;
}
declare const NavBar: FunctionComponent<Partial<NavBarProps$1>>;

interface PaginationProps {
    defaultValue: number;
    modelValue: number;
    mode: 'multi' | 'simple';
    prevText?: React__default.ReactNode;
    nextText?: React__default.ReactNode;
    pageCount: string | number;
    totalItems: string | number;
    itemsPerPage: string | number;
    showPageSize: string | number;
    forceEllipses: boolean;
    pageNodeRender: (page: any) => React__default.ReactNode;
    onChange: (currPage: number) => void;
    updatecurrent: (currPage: number) => void;
    style?: React__default.CSSProperties;
    className?: string;
}
declare const Pagination: FunctionComponent<Partial<PaginationProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'onChange'>>;

type NavBarProps = {
    showhead?: boolean;
};
interface SideNavBarProps extends React__default.HTMLAttributes<HTMLDivElement>, NavBarProps {
    title: string;
    visible: boolean;
    width?: string;
    offset?: number;
    position?: 'left' | 'right';
    onClose: () => void;
    children?: React__default.ReactNode;
}
declare const SideNavBar: FunctionComponent<SideNavBarProps>;

type SideNavBarItemProps = {
    title: string;
    ikey: string | number;
    onClick?: ({ title, ikey }: {
        title: string;
        ikey: string | number;
    }) => void;
    children?: React__default.ReactNode;
};
declare const SideNavBarItem: FunctionComponent<SideNavBarItemProps>;

type SubSideNavBarProps = {
    title: string;
    ikey: string | number;
    open?: boolean;
    children?: React__default.ReactNode;
    onClick?: ({ title, ikey, isShow, }: {
        title: string;
        ikey: string | number;
        isShow: boolean;
    }) => void;
};
declare const SubSideNavBar: FunctionComponent<SubSideNavBarProps>;

interface TabbarProps {
    visible: number | string;
    activeVisible?: number | string;
    bottom: boolean;
    size: string | number;
    unactiveColor: string;
    activeColor: string;
    safeAreaInsetBottom: boolean;
    className: string;
    style: React__default.CSSProperties;
    onSwitch: (child: React__default.ReactElement<any>, active: number) => void;
    children?: React__default.ReactNode;
}
declare const Tabbar: FunctionComponent<Partial<TabbarProps>>;

interface TabbarItemProps extends BasicComponent {
    dot: boolean;
    size: string | number;
    iconSize: string | number;
    className: string;
    tabTitle: string;
    icon: string;
    href: string;
    to: any;
    num: string | number;
    active: boolean;
    activeColor: string;
    unactiveColor: string;
    index: number;
    handleClick: (idx: number) => void;
}
declare const TabbarItem: FunctionComponent<Partial<TabbarItemProps>>;

interface TabPanelInnerProps {
    autoHeightClassName: string;
}
interface TabPaneProps {
    title: string | number;
    paneKey: string | number;
    activeKey: string | number;
    disabled: boolean;
    className: string;
    children?: React__default.ReactNode;
}
declare const TabPane: FunctionComponent<Partial<TabPaneProps & TabPanelInnerProps>>;

declare class Title {
    title: string;
    paneKey: string;
    disabled: boolean;
    index: number;
    constructor();
}
type TabsSize = 'large' | 'normal' | 'small';
interface TabsProps extends BasicComponent {
    className: string;
    style: React__default.CSSProperties;
    tabStyle: React__default.CSSProperties;
    value: string | number;
    color: string;
    background: string;
    direction: string;
    type: string;
    titleScroll: boolean;
    ellipsis: boolean;
    animatedTime: number | string;
    titleGutter: number | string;
    size: TabsSize;
    leftAlign: boolean;
    titleNode: () => JSX.Element[];
    onChange: (t: Title) => void;
    onClick: (t: Title) => void;
    autoHeight: boolean;
    children?: React__default.ReactNode;
}
declare const Tabs: FunctionComponent<Partial<TabsProps>> & {
    TabPane: typeof TabPane;
};

type CalendarRef$1 = {
    scrollToDate: (date: string) => void;
};
interface Day$1 {
    day: string | number;
    type: string;
}
interface CalendarProps {
    type?: string;
    isAutoBackFill?: boolean;
    poppable?: boolean;
    visible?: boolean;
    title?: string;
    defaultValue?: string | string[];
    startDate?: string;
    endDate?: string;
    showToday?: boolean;
    startText?: string;
    endText?: string;
    confirmText?: string;
    showTitle?: boolean;
    showSubTitle?: boolean;
    toDateAnimation?: boolean;
    onBtn?: (() => string | JSX.Element) | undefined;
    onDay?: ((date: Day$1) => string | JSX.Element) | undefined;
    onTopInfo?: ((date: Day$1) => string | JSX.Element) | undefined;
    onBottomInfo?: ((date: Day$1) => string | JSX.Element) | undefined;
    onClose?: () => void;
    onChoose?: (param: string) => void;
    onSelected?: (data: string) => void;
    onYearMonthChange?: (param: string) => void;
}
declare const Calendar: React__default.ForwardRefExoticComponent<Partial<CalendarProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, ""> & React__default.RefAttributes<CalendarRef$1>>;

type CalendarRef = {
    scrollToDate: (date: string) => void;
};
type InputDate = string | string[];
interface Day {
    day: string | number;
    type: string;
}
interface CalendarItemProps {
    type?: string;
    isAutoBackFill?: boolean;
    poppable?: boolean;
    visible?: boolean;
    title?: string;
    defaultValue: InputDate;
    startDate?: InputDate;
    endDate?: InputDate;
    showToday?: boolean;
    startText?: string;
    endText?: string;
    confirmText?: string;
    showTitle?: boolean;
    showSubTitle?: boolean;
    toDateAnimation?: boolean;
    onBtn?: (() => string | JSX.Element) | undefined;
    onDay?: ((date: Day) => string | JSX.Element) | undefined;
    onTopInfo?: ((date: Day) => string | JSX.Element) | undefined;
    onBottomInfo?: ((date: Day) => string | JSX.Element) | undefined;
    onChoose?: (data: any) => void;
    onUpdate?: () => void;
    onSelected?: (data: string) => void;
    onYearMonthChange?: (data: any) => void;
}
declare const CalendarItem: React__default.ForwardRefExoticComponent<Partial<CalendarItemProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, ""> & React__default.RefAttributes<CalendarRef>>;

interface CascaderOption {
    text?: string;
    value?: number | string;
    paneKey?: string;
    disabled?: boolean;
    children?: CascaderOption[];
    leaf?: boolean;
    level?: number;
    loading?: boolean;
    root?: boolean;
}

interface CascaderProps {
    className: string;
    style: CSSProperties;
    activeColor: string;
    checkedIcon: string;
    tabsColor: string;
    poppable: boolean;
    visible: boolean;
    options: CascaderOption[];
    value: string[];
    title: string;
    textKey: string;
    valueKey: string;
    childrenKey: string;
    convertConfig: Record<string, string | number | null>;
    closeable: boolean;
    closeIconPosition: string;
    closeIcon: string;
    lazy: boolean;
    lazyLoad: (node: any, resolve: any) => void;
    onClose?: () => void;
    onChange: (value: any, params: any) => void;
    onPathChange: (value: any, params: any) => void;
}
declare const Cascader: React__default.ForwardRefExoticComponent<Partial<CascaderProps> & {
    children?: React__default.ReactNode;
} & React__default.RefAttributes<unknown>>;

interface RadioGroupOptionType {
    label: string;
    value: string;
    disabled?: boolean;
    onChange?: MouseEventHandler<HTMLDivElement>;
}

type CheckboxTextPosition = 'left' | 'right';
type CheckboxDirection = 'horizontal' | 'vertical';
interface CheckboxGroupProps {
    disabled: boolean;
    checkedValue: string[];
    max: number | undefined;
    textPosition: CheckboxTextPosition;
    direction: CheckboxDirection;
    onChange: (value: string[]) => void;
    options: RadioGroupOptionType[];
}
declare const CheckboxGroup: React__default.ForwardRefExoticComponent<Partial<CheckboxGroupProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, "onChange"> & React__default.RefAttributes<unknown>>;

interface CheckboxProps extends BasicComponent {
    checked: boolean;
    disabled: boolean;
    textPosition: 'left' | 'right';
    iconSize: string | number;
    iconName: string;
    iconActiveName: string;
    iconIndeterminateName: string;
    iconClassPrefix: string;
    iconFontClassName: string;
    indeterminate: boolean;
    label: string | number;
    onChange: (state: boolean, label: string) => void;
}
declare const Checkbox: FunctionComponent<Partial<CheckboxProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'onChange'>> & {
    Group: typeof CheckboxGroup;
};

interface PickerOption$1 {
    text: string | number;
    value: string | number;
    disabled?: string;
    children?: PickerOption$1[];
    className?: string | number;
}
interface DatePickerProps {
    modelValue: Date | null;
    visible: boolean;
    title: string;
    type: 'date' | 'time' | 'year-month' | 'month-day' | 'datehour' | 'datetime' | 'hour-minutes';
    isShowChinese: boolean;
    minuteStep: number;
    minDate: Date;
    maxDate: Date;
    threeDimensional: boolean;
    className?: string;
    style?: React__default.CSSProperties;
    formatter: (type: string, option: PickerOption$1) => PickerOption$1;
    filter: (type: string, option: PickerOption$1[]) => PickerOption$1[];
    onCloseDatePicker: () => void;
    onConfirmDatePicker: (values: (string | number)[], options: PickerOption$1[]) => void;
    onChange: (columnIndex: string | number, values: (string | number)[], options: PickerOption$1[]) => void;
}
declare const DatePicker: FunctionComponent<Partial<DatePickerProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'onChange'>>;

interface FormItemRuleWithoutValidator {
    [key: string]: any;
    regex?: RegExp;
    required?: boolean;
    message?: string;
}
interface FormItemRule extends FormItemRuleWithoutValidator {
    validator?: (ruleCfg: FormItemRuleWithoutValidator, value: string) => boolean | string | Promise<boolean | string>;
}
interface BaseFormField {
    /**
     * 字段名
     */
    name: string;
    /**
     * label 标签的文本
     */
    label: string;
    /**
     * 校验规则，设置字段的校验逻辑
     */
    rules: FormItemRule[];
    /**
     * 是否禁用表单项
     */
    disabled: boolean;
}

interface ConfigConsumerProps {
    [propName: string]: any;
}
declare const FormItemContext: React.Context<ConfigConsumerProps>;

type TextAlign = 'start' | 'end' | 'left' | 'right' | 'center' | 'justify' | 'match-parent';
interface FormItemProps extends BasicComponent, BaseFormField {
    labelWidth: string | number;
    errorMessageAlign: TextAlign;
    showErrorLine: boolean;
    showErrorMessage: boolean;
}
declare const defaultProps: FormItemProps;
type FieldProps = typeof defaultProps & Partial<BaseFormField>;
declare class FormItem extends React__default.Component<FieldProps> {
    static defaultProps: FormItemProps;
    static contextType: any;
    context: React__default.ContextType<typeof FormItemContext>;
    private cancelRegister;
    componentDidMount(): void;
    componentWillUnmount(): void;
    getControlled: (children: React__default.ReactElement) => {
        value: any;
        onChange: (event: React__default.ChangeEvent<HTMLInputElement> | number | string | string[]) => void;
    };
    onStoreChange: () => void;
    renderLayout: (childNode: React__default.ReactNode) => JSX.Element;
    pxCheck: (value: string | number) => string;
    render(): JSX.Element;
}

interface BaseForm {
    /**
     * 经 Form.useForm() 创建的 form 控制实例，不提供时会自动创建
     */
    form: any;
    /**
     * label的位置
     * 可选值 top/left/right
     */
    labelPosition: string | number;
    /**
     * 表单分组名称
     */
    formGroupTitle: string;
    starPositon: string;
    /**
     * 表单校验成功回调
     */
    onFinish: (obj: object) => void;
    /**
     * 表单校验失败回调
     */
    onFinishFailed: (value: []) => void;
}

interface FormProps extends BasicComponent, BaseForm {
}
declare const Form: FunctionComponent<Partial<FormProps> & React__default.HTMLAttributes<HTMLFormElement>> & {
    Item: typeof FormItem;
};

type InputAlignType = 'left' | 'center' | 'right';
type InputFormatTrigger = 'onChange' | 'onBlur';
type InputType = HTMLInputTypeAttribute;
type InputRule = {
    pattern?: RegExp;
    message?: string;
    required?: boolean;
};
interface InputProps extends BasicComponent {
    type: InputType;
    name: string;
    defaultValue: any;
    placeholder: string;
    label: string;
    labelClass: string;
    labelWidth: string | number;
    labelAlign: InputAlignType;
    colon: boolean;
    inputAlign: InputAlignType;
    center: boolean;
    required: boolean;
    disabled: boolean;
    readonly: boolean;
    error: boolean;
    maxlength: any;
    leftIcon: string;
    leftIconSize: string | number;
    rightIcon: string;
    rightIconSize: string | number;
    clearable: boolean;
    clearIcon: string;
    clearSize: string | number;
    border: boolean;
    formatTrigger: InputFormatTrigger;
    rules: Array<InputRule>;
    errorMessage: string;
    errorMessageAlign: InputAlignType;
    rows: string | number;
    showWordLimit: boolean;
    autofocus: boolean;
    style?: CSSProperties;
    className?: string;
    slotButton?: React__default.ReactNode;
    slotInput?: React__default.ReactNode;
    formatter: (value: string) => void;
    onChange?: (value: any, event: Event) => void;
    onBlur?: (value: any, event: Event) => void;
    onFocus?: (value: any, event: Event) => void;
    onClear?: (value: any, event: Event) => void;
    keypress?: (value: any, event: Event) => void;
    onClickInput?: (value: any) => void;
    onClickLeftIcon?: (value: any) => void;
    onClickRightIcon?: (value: any) => void;
    onClick?: (value: any) => void;
}
declare const Input: React__default.ForwardRefExoticComponent<Partial<InputProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, "onFocus" | "onBlur" | "onChange" | "onClick"> & React__default.RefAttributes<unknown>>;

interface InputNumberProps extends BasicComponent {
    disabled: boolean;
    buttonSize: string | number;
    min: string | number;
    max: string | number;
    inputWidth: string | number;
    readonly: boolean;
    modelValue: string | number;
    step: string | number;
    decimalPlaces: string | number;
    isAsync: boolean;
    className: string;
    style: React__default.CSSProperties;
    add: (e: MouseEvent) => void;
    reduce: (e: MouseEvent) => void;
    overlimit: (e: MouseEvent) => void;
    blur: (e: ChangeEvent<HTMLInputElement>) => void;
    focus: (e: FocusEvent<HTMLInputElement>) => void;
    change: (param: string | number, e: MouseEvent | ChangeEvent<HTMLInputElement>) => void;
    onAdd: (e: MouseEvent) => void;
    onReduce: (e: MouseEvent) => void;
    onOverlimit: (e: MouseEvent) => void;
    onBlurFuc: (e: ChangeEvent<HTMLInputElement>) => void;
    onFocus: (e: FocusEvent<HTMLInputElement>) => void;
    onChangeFuc: (param: string | number, e: MouseEvent | ChangeEvent<HTMLInputElement>) => void;
}
declare const InputNumber: FunctionComponent<Partial<InputNumberProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface NumberKeyboardProps {
    confirmText: string;
    title: string;
    visible: boolean;
    overlay: boolean;
    type: string;
    customKey: Array<string>;
    randomKeys: boolean;
    popClass: string;
    className: string;
    style?: CSSProperties;
    onChange?: (value: string) => void;
    onDelete?: () => void;
    onClose: () => void;
}
declare const NumberKeyboard: FunctionComponent<Partial<NumberKeyboardProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'onChange'>>;

interface PickerOption {
    text: string | number;
    value: string | number;
    disabled?: string;
    children?: PickerOption[];
    className?: string | number;
}
interface PickerProps {
    isVisible: boolean;
    title?: string;
    listData: (PickerOption | PickerOption[])[];
    defaultValueData?: (number | string)[];
    className?: '';
    style?: React__default.CSSProperties;
    threeDimensional?: boolean;
    swipeDuration: number | string;
    onConfirm?: (selectedValue: (string | number)[], selectedOptions: PickerOption[]) => void;
    onClose?: (selectedValue: (string | number)[], selectedOptions: PickerOption[]) => void;
    onCloseUpdate?: (selectedValue: (string | number)[], list: PickerOption[], pickerRef: RefObject<HTMLDivElement>) => void;
    onChange?: (index: number, value: (string | number)[], selectedOptions: PickerOption[]) => void;
}
declare const Picker: React__default.ForwardRefExoticComponent<Partial<PickerProps> & React__default.RefAttributes<unknown>>;

type Position$1 = 'left' | 'right';
type Direction = 'horizontal' | 'vertical';
interface RadioGroupProps {
    value: string | number | boolean | null;
    textPosition: Position$1;
    direction: Direction;
    onChange: (value: string | number | boolean) => void;
    options: RadioGroupOptionType[];
}
declare const RadioGroup: React__default.ForwardRefExoticComponent<Partial<RadioGroupProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, "onChange"> & React__default.RefAttributes<unknown>>;

type Shape = 'button' | 'round';
type Position = 'right' | 'left';
interface RadioProps extends BasicComponent {
    className: string;
    style: React__default.CSSProperties;
    disabled: boolean;
    checked: boolean;
    shape: Shape;
    textPosition: Position;
    value: string | number | boolean;
    iconName: string;
    iconActiveName: string;
    iconSize: string | number;
    onChange: MouseEventHandler<HTMLDivElement>;
}
declare const Radio: FunctionComponent<Partial<RadioProps> & React__default.HTMLAttributes<HTMLDivElement>> & {
    RadioGroup: typeof RadioGroup;
};

type SliderValue = number | number[];
interface RangeProps {
    className: string;
    style: CSSProperties;
    range: boolean;
    disabled: boolean;
    activeColor: string;
    inactiveColor: string;
    buttonColor: string;
    hiddenRange: boolean;
    hiddenTag: boolean;
    min: number | string;
    max: number | string;
    minDesc: number | string;
    maxDesc: number | string;
    curValueDesc: number | string;
    step: number | string;
    modelValue: SliderValue;
    button: React__default.ReactNode;
    vertical: boolean;
    marks: Record<string, unknown>;
    dragStart?: () => void;
    dragEnd?: () => void;
    onChange?: (value: number) => void;
    onDragStart?: () => void;
    onDragEnd?: () => void;
}
declare const Range: FunctionComponent<Partial<RangeProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'onClick' | 'onChange'>>;

interface RateProps extends BasicComponent {
    count: string | number;
    modelValue: string | number;
    minimizeValue: string | number;
    iconSize: string | number;
    activeColor: string;
    voidColor: string;
    checkedIcon: string;
    uncheckedIcon: string;
    disabled: boolean;
    readonly: boolean;
    allowHalf: boolean;
    spacing: string | number;
    onChange: (val: number) => void;
}
declare const Rate: FunctionComponent<Partial<RateProps>>;

interface SearchBarProps extends BasicComponent {
    /** 文本值	 */
    value?: number | string;
    /** 输入框占位提示文字	 */
    placeholder?: string;
    /** 搜索框形状，可选值为 round	 */
    shape?: 'square' | 'round';
    /** 自定义class名	 */
    className?: string;
    /** 是否禁用输入框	 */
    disabled?: boolean;
    /** 最大输入长度	 */
    maxLength?: number;
    /** 是否启用清除图标，点击清除图标后会清空输入框	 */
    clearable?: boolean;
    clearIconSize?: string | number;
    /** 搜索框外部背景色	 */
    background?: string;
    /** 搜索框背景色	 */
    inputBackground?: string;
    /** 输入框内容对齐方式	 */
    align?: string;
    /** 是否将输入框设为只读状态，只读状态下无法输入内容   */
    readOnly?: boolean;
    /**  是否自动聚焦，iOS 系统不支持该属性	 */
    autoFocus?: boolean;
    /** 搜索框左侧文本	 */
    label?: React__default.ReactNode;
    /** 输入框内 左icon   */
    leftinIcon?: React__default.ReactNode;
    /** 输入框内 右icon  */
    rightinIcon?: React__default.ReactNode;
    /** 输入框外 左icon  */
    leftoutIcon?: React__default.ReactNode;
    /** 输入框外 右icon  */
    rightoutIcon?: React__default.ReactNode;
    /** 取消按钮文字	 */
    actionText?: React__default.ReactNode;
    /**  确定搜索时触发	 */
    onSearch?: (val: string) => void;
    /** 输入框内容变化时触发	 */
    onChange?: (value: string, event: Event) => void;
    /** 输入框获得焦点时触发	 */
    onFocus?: (value: string, event: Event) => void;
    /** 输入框失去焦点时触发	 */
    onBlur?: (value: string, event: Event) => void;
    /** 点击清除按钮后触发	 */
    onClear?: (event: Event) => void;
    /** 点击取消按钮后触发	 */
    onCancel?: () => void;
    /** 点击输入区域时触发	 */
    onClickInput?: (event: Event) => void;
    /** 点击输入框内左侧图标时触发	 */
    onClickLeftinIcon?: (value: string, event: Event) => void;
    /** 点击输入框外左侧图标时触发	 */
    onClickLeftoutIcon?: (value: string, event: Event) => void;
    /** 点击输入框内右侧图标时触发	 */
    onClickRightinIcon?: (value: string, event: Event) => void;
    /** 点击输入框外右侧图标时触发	 */
    onClickRightoutIcon?: (value: string, event: Event) => void;
}
declare const SearchBar: FunctionComponent<Partial<SearchBarProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'onChange' | 'onFocus' | 'onBlur'>>;

interface ShortPasswordProps extends BasicComponent {
    title: string;
    desc: string;
    tips: string;
    visible: boolean;
    modelValue: string | number;
    errorMsg: string;
    noButton: boolean;
    closeOnClickOverlay: boolean;
    length: string | number;
    className: string;
    style?: CSSProperties;
    autoFocus?: boolean;
    onChange: (value: string | number) => void;
    onOk: (value: string | number) => void;
    onCancel: () => void;
    onClose: () => void;
    onTips: () => void;
    onComplete: (value: string | number) => void;
}
declare const ShortPassword: FunctionComponent<Partial<ShortPasswordProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'onChange'>>;

interface TextAreaProps {
    className?: string;
    defaultValue: string | number | any;
    textAlign?: string | any;
    limitshow?: boolean;
    maxlength?: any;
    rows?: any;
    placeholder?: string;
    readonly?: boolean;
    disabled?: boolean;
    autosize?: boolean;
    style?: CSSProperties;
    onChange?: (value: any, event: Event) => void;
    onBlur?: (event: Event) => void;
    onFocus?: (event: Event) => void;
}
declare const TextArea: FunctionComponent<Partial<TextAreaProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'onChange' | 'onBlur' | 'onFocus'>>;

declare class UploadOptions {
    url: string;
    name: string;
    fileType?: string | undefined;
    formData?: FormData;
    sourceFile: any;
    method: string;
    xhrState: string | number;
    timeout: number;
    headers: {};
    withCredentials: boolean;
    onStart?: Function;
    taroFilePath?: string;
    onProgress?: Function;
    onSuccess?: Function;
    onFailure?: Function;
    beforeXhrUpload?: Function;
}

type FileType$1<T> = {
    [key: string]: T;
};
type FileItemStatus = 'ready' | 'uploading' | 'success' | 'error' | 'removed';
/** 图片的尺寸 */
interface sizeType {
    /** 原图 */
    original: string;
    /** compressed */
    compressed: string;
}
/** 图片的来源 */
interface sourceType {
    /** 从相册选图 */
    album: string;
    /** 使用相机 */
    camera: string;
}
/** 视频的来源 */
interface mediaType {
    /** 只能拍摄图片或从相册选择图片 */
    image: string;
    /** 只能拍摄视频或从相册选择视频 */
    video: string;
}
interface UploaderProps extends BasicComponent {
    url: string;
    maximum: string | number;
    sizeType: (keyof sizeType)[];
    sourceType: (keyof sourceType)[];
    mediaType: (keyof mediaType)[];
    camera: string;
    maximize: number;
    defaultFileList: FileType$1<string>[];
    listType: string;
    uploadIcon: string;
    uploadIconSize: string | number;
    uploadIconTip: string;
    name: string;
    accept: string;
    disabled: boolean;
    autoUpload: boolean;
    multiple: boolean;
    timeout: number;
    data: object;
    method: string;
    xhrState: number | string;
    headers: object;
    isPreview: boolean;
    isDeletable: boolean;
    className: string;
    defaultImg: string;
    maxDuration: number;
    style: React__default.CSSProperties;
    onStart?: (option: UploadOptions) => void;
    onRemove?: (file: FileItem, fileList: FileType$1<string>[]) => void;
    onSuccess?: (param: {
        responseText: XMLHttpRequest['responseText'];
        option: UploadOptions;
        fileList: FileType$1<string>[];
        file: FileItem;
    }) => void;
    onProgress?: (param: {
        e: ProgressEvent<XMLHttpRequestEventTarget>;
        option: UploadOptions;
        percentage: string | number;
    }) => void;
    onFailure?: (param: {
        responseText: XMLHttpRequest['responseText'];
        option: UploadOptions;
        fileList: FileType$1<string>[];
        file: FileItem;
    }) => void;
    onUpdate?: (fileList: FileType$1<string>[]) => void;
    onOversize?: (files: Taro.chooseImage.ImageFile[] | Taro.chooseMedia.ChooseMedia[] | any) => void;
    onChange?: (param: {
        fileList: FileType$1<string>[];
    }) => void;
    onBeforeXhrUpload?: (xhr: XMLHttpRequest, options: any) => void;
    onBeforeDelete?: (file: FileItem, files: FileType$1<string>[]) => boolean;
    onFileItemClick?: (file: FileItem) => void;
}
declare class FileItem {
    status: FileItemStatus;
    message: string;
    uid: string;
    name?: string;
    url?: string;
    type?: string;
    path?: string;
    percentage: string | number;
    formData: any;
}
declare const Uploader: React__default.ForwardRefExoticComponent<Partial<UploaderProps> & {
    children?: React__default.ReactNode;
} & React__default.RefAttributes<unknown>>;

type ItemType<T> = {
    [key: string]: T;
};
interface ActionSheetProps {
    cancelTxt: string;
    optionTag: string;
    optionSubTag: string;
    chooseTagValue: string;
    title: string;
    color: string;
    description: string;
    menuItems: ItemType<string | boolean>[];
    onCancel: () => void;
    onChoose: (item: any, index: number) => void;
    visible: boolean;
    className: string;
    style: React__default.CSSProperties;
}
declare const ActionSheet: FunctionComponent<Partial<ActionSheetProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface BackTopProps extends BasicComponent {
    className?: string;
    bottom: number;
    right: number;
    elId: string;
    distance: number;
    zIndex: number;
    isAnimation: boolean;
    duration: number;
    children?: HTMLElement | any;
    style?: React__default.CSSProperties;
    onClick?: (event: MouseEvent) => void;
}
declare const BackTop: FunctionComponent<Partial<BackTopProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'onClick'>>;

interface BasicDialogProps {
    className?: string;
    style?: CSSProperties;
    visible?: boolean;
    title?: ReactNode;
    content?: ReactNode;
    footer?: ReactNode;
    okText?: ReactNode;
    cancelText?: ReactNode;
    mask?: boolean;
    noOkBtn?: boolean;
    noCancelBtn?: boolean;
    okBtnDisabled?: boolean;
    noFooter?: boolean;
    closeOnClickOverlay?: boolean;
    cancelAutoClose?: boolean;
    textAlign?: string;
    footerDirection?: string;
    lockScroll?: boolean;
    onClosed?: () => void;
    onOk?: (e?: MouseEvent) => Promise<() => void> | void;
    onCancel?: () => void;
    onClickSelf?: () => void;
    onConfirm?: (e?: MouseEvent) => Promise<() => void> | void;
}

type DialogProps = BasicDialogProps;
declare const BaseDialog: React__default.ForwardRefExoticComponent<Partial<BasicDialogProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, "title" | "content"> & React__default.RefAttributes<unknown>>;

interface DragProps {
    attract: boolean;
    direction: 'x' | 'y' | 'lock' | undefined;
    boundary: {
        top: number;
        left: number;
        right: number;
        bottom: number;
    };
    className: string;
    style: React__default.CSSProperties;
}
declare const Drag: FunctionComponent<Partial<DragProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface InfiniteloadingProps extends BasicComponent {
    hasMore: boolean;
    upperThreshold: number;
    containerId: string;
    isOpenRefresh: boolean;
    pullIcon: string;
    pullTxt: string;
    loadIcon: string;
    loadTxt: string;
    loadMoreTxt: string;
    className: string;
    style: React__default.CSSProperties;
    onRefresh: (param: () => void) => void;
    onLoadMore: (param: () => void) => void;
    onScrollChange: (param: number) => void;
}
declare const Infiniteloading: FunctionComponent<Partial<InfiniteloadingProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface NotifyProps {
    id?: string;
    style?: React__default.CSSProperties;
    msg: string;
    color: string;
    duration: number;
    type: string;
    className: string;
    background: string;
    position: string;
    isWrapTeleport: boolean;
    visible: boolean;
    onClosed: () => void;
    onClick: () => void;
}
declare const Notify: FunctionComponent<Partial<NotifyProps> & React__default.HTMLAttributes<HTMLDivElement>>;

type PullStatus = 'pulling' | 'canRelease' | 'refreshing' | 'complete';
interface PullToRefreshProps {
    className: string;
    style: React__default.CSSProperties;
    onRefresh: () => Promise<any>;
    pullingText: ReactNode;
    canReleaseText: ReactNode;
    refreshingText: ReactNode;
    completeText: ReactNode;
    completeDelay: number;
    headHeight: number;
    threshold: number;
    disabled: boolean;
    renderText: (status: PullStatus) => ReactNode;
    children: React__default.ReactNode;
}
declare const PullToRefresh: FunctionComponent<Partial<PullToRefreshProps>>;

type SwipeSide = 'left' | 'right';
type SwipePosition = SwipeSide | 'cell' | 'outside';
interface SwipeInstance {
    open: (side: SwipeSide) => void;
    close: () => void;
}
interface SwipeProps {
    /** 自定义类名 */
    className: string;
    /** 自定义样式 */
    style: React__default.CSSProperties;
    /** 标识符，可以在事件参数中获取到 */
    name?: string | number;
    /** 指定左侧滑动区域宽度，单位为px */
    leftWidth?: string | number;
    /** 指定右侧滑动区域宽度，单位为 px */
    rightWidth?: string | number;
    /** 左侧滑动区域的内容 */
    leftAction?: React__default.ReactNode;
    /** 右侧滑动区域的内容 */
    rightAction?: React__default.ReactNode;
    /** 关闭前的回调函数，返回 false 可阻止关闭，支持返回 Promise */
    beforeClose?: (position: string) => void;
    /** 是否禁用 */
    disabled?: boolean;
    /** 打开时触发 */
    onOpen?: ({ name, position, }: {
        name: string | number;
        position: SwipeSide;
    }) => void;
    /** 关闭时触发 */
    onClose?: ({ name, position, }: {
        name: string | number;
        position: SwipePosition;
    }) => void;
    /** 点击时触发 */
    onActionClick?: (event: Event, position: SwipePosition) => void;
    onTouchStart?: (event: Event) => void;
    onTouchEnd?: (event: Event) => void;
    onTouchMove?: (event: Event) => void;
    children?: React__default.ReactNode;
}
declare const Swipe: React__default.ForwardRefExoticComponent<Partial<SwipeProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, "onTouchEnd" | "onTouchMove" | "onTouchStart"> & React__default.RefAttributes<SwipeInstance>>;

interface SwitchProps {
    isAsync: boolean;
    checked: boolean;
    disable: boolean;
    activeColor: string;
    inactiveColor: string;
    activeText: string;
    inactiveText: string;
    className: string;
    style: React__default.CSSProperties;
    onChange: (val: boolean, event: React__default.MouseEvent) => void;
}
declare const Switch: FunctionComponent<Partial<SwitchProps>>;

interface ToastProps {
    id?: string;
    style?: React__default.CSSProperties;
    icon: string | null;
    iconSize: string;
    msg: string | React__default.ReactNode;
    bottom: number | string;
    duration: number;
    center: boolean;
    type: string;
    title: string;
    customClass: string;
    size: string | number;
    textAlignCenter: boolean;
    bgColor: string;
    cover: boolean;
    coverColor: string;
    closeOnClickOverlay: boolean;
    visible: boolean;
    onClose: () => void;
}
declare const Toast: FunctionComponent<Partial<ToastProps> & React__default.HTMLAttributes<HTMLDivElement>>;

type AnimateType = 'shake' | 'ripple' | 'breath' | 'float' | 'slide-right' | 'slide-left' | 'slide-top' | 'slide-bottom' | 'jump' | 'twinkle' | 'flicker';
type AnimateAction = 'initial' | 'click';

interface AnimateProps {
    type: AnimateType;
    action: AnimateAction;
    loop: boolean;
    className: string;
    style: React__default.CSSProperties;
    onClick: (event: React__default.MouseEvent<HTMLDivElement, MouseEvent>) => void;
}
declare const Animate: FunctionComponent<Partial<AnimateProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface CountUpProps {
    maxLen: number;
    endNumber: string;
    delaySpeed?: number;
    easeSpeed: number;
    thousands: boolean;
    className: string;
    style: React__default.CSSProperties;
}

interface AnimatingNumbersProps {
}
type AnimatingNumbersStates = {};
declare class AnimatingNumbers extends Component<AnimatingNumbersProps, AnimatingNumbersStates> {
    static defaultProps: AnimatingNumbersProps;
    static displayName: string;
    static CountUp: React__default.FunctionComponent<Partial<CountUpProps>>;
    constructor(props: AnimatingNumbersProps);
    render(): JSX.Element;
}

interface AudioProps extends BasicComponent {
    className?: string;
    style?: CSSProperties;
    url: string;
    autoplay?: boolean;
    loop?: boolean;
    type: string;
    onFastBack?: (ctx: InnerAudioContext) => void;
    onForward?: (ctx: InnerAudioContext) => void;
    onPause?: any;
    onPlay?: any;
    onPlayEnd?: (ctx: InnerAudioContext) => void;
    onCanPlay?: (ctx: InnerAudioContext) => void;
}
declare const Audio: FunctionComponent<Partial<AudioProps> & (React__default.HTMLAttributes<HTMLDivElement> | InnerAudioContext)>;

interface AvatarProps extends BasicComponent {
    size: string;
    icon: string;
    iconSize?: string | number;
    shape: AvatarShape;
    bgColor: string;
    color: string;
    prefixCls: string;
    url: string;
    className: string;
    style: React__default.CSSProperties;
    activeAvatar: (e: MouseEvent) => void;
    onActiveAvatar: (e: MouseEvent) => void;
    onError: (e: any) => void;
}
type AvatarShape = 'round' | 'square';
declare const Avatar: FunctionComponent<Partial<AvatarProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface AvatarGroupProps {
    maxContent: string;
    maxCount: string | number;
    maxBgColor: string;
    maxColor: string;
    size: string;
    shape: string;
    span: string;
    zIndex: string;
    className: string;
    style: React__default.CSSProperties;
}
declare const AvatarGroup: FunctionComponent<Partial<AvatarGroupProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface BadgeProps extends BasicComponent {
    value: any;
    dot: boolean;
    max: number;
    top: string;
    right: string;
    zIndex: string;
    color: string;
    icons: any;
    children?: ReactNode;
}
declare const Badge: FunctionComponent<Partial<BadgeProps>>;

interface CircleProgressProps {
    progress: string | number;
    strokeWidth?: string | number;
    radius?: number | string;
    strokeLinecap?: 'butt' | 'round' | 'square' | 'inherit' | undefined;
    circleColor?: object | string;
    pathColor?: string;
    clockwise?: boolean;
    className?: string;
}
declare const CircleProgress: FunctionComponent<CircleProgressProps & React__default.HTMLAttributes<HTMLDivElement>>;

interface CollapseProps {
    className: string;
    style: React__default.CSSProperties;
    activeName: Array<number | string> | number | string;
    accordion: boolean;
    icon: string;
    iconSize: string;
    iconColor: string;
    rotate: number;
    onChange: (isOpen: boolean, name: string) => void;
    children?: React__default.ReactNode;
}
declare const Collapse: FunctionComponent<Partial<CollapseProps>>;

interface CollapseItemProps$1 extends BasicComponent {
    title: string;
    name: string;
    isOpen: boolean;
    icon: string;
    iconSize: string;
    iconColor: string;
    disabled: boolean;
    rotate: number;
    subTitle: string;
    titleIcon: string;
    titleIconColor: string;
    titleIconPosition: string;
    titleIconSize: string;
    childnull: boolean;
    onToggle: (isOpen: boolean, name: string) => void;
}
declare const CollapseItem: FunctionComponent<Partial<CollapseItemProps$1> & React__default.HTMLAttributes<HTMLDivElement>>;

interface CountDownProps {
    className?: string;
    style?: CSSProperties;
    paused: boolean;
    startTime: number;
    endTime: number;
    remainingTime: number;
    millisecond: boolean;
    format: string;
    autoStart: boolean;
    time: number;
    destroy: boolean;
    onEnd: () => void;
    onPaused: (restTime: number) => void;
    onRestart: (restTime: number) => void;
    onUpdate: (restTime: any) => void;
    children: ReactNode;
}
declare const CountDown: React__default.ForwardRefExoticComponent<Partial<CountDownProps> & React__default.RefAttributes<unknown>>;

interface EllipsisProps {
    content: string;
    direction: string;
    rows: number | string;
    expandText: string;
    collapseText: string;
    symbol: string;
    lineHeight: number | string;
    onClick: () => void;
    onChange: (type: string) => void;
}
declare const Ellipsis: FunctionComponent<Partial<EllipsisProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'onClick' | 'onChange'>>;

interface EmptyProps {
    image: ReactNode;
    imageSize: number | string;
    description: ReactNode;
    className: string;
}
declare const Empty: FunctionComponent<Partial<EmptyProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface ImagePreviewProps {
    className?: string;
    images: Array<{
        src: string;
    }>;
    videos: Array<{
        source: {
            src: string;
            type: string;
        };
        options: {
            muted: boolean;
            controls: boolean;
        };
    }>;
    show: boolean;
    autoplay: number | string;
    initNo: number;
    contentClose: boolean;
    paginationVisible: boolean;
    style?: CSSProperties;
    paginationColor: string;
    onClose: () => void;
}
declare const ImagePreview: FunctionComponent<Partial<ImagePreviewProps>>;

interface NoticeBarProps extends BasicComponent {
    direction: string;
    className?: string;
    style?: CSSProperties;
    list: any;
    standTime: number;
    complexAm: boolean;
    height: number;
    text: string;
    closeMode: boolean;
    wrapable: boolean;
    leftIcon: string;
    color: string;
    background: string;
    delay: string | number;
    scrollable: boolean | null;
    speed: number;
    rightIcon?: HTMLElement | any;
    close?: (event: any) => void;
    click?: (event: any) => void;
    onClose?: (event: any) => void;
    onClick?: (event: any) => void;
    onClickItem?: (event: any, value: any) => void;
}
declare const NoticeBar: FunctionComponent<Partial<NoticeBarProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'onClick'>>;

type PopoverTheme = 'light' | 'dark';
type PopoverLocation = 'bottom' | 'top' | 'left' | 'right' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'left-start' | 'left-end' | 'right-start' | 'right-end';
interface List {
    name: string;
    icon?: string;
    disabled?: boolean;
}
interface PopoverProps extends BasicComponent {
    list: List[];
    theme: PopoverTheme;
    location: PopoverLocation | string;
    visible: boolean;
    offset: string | number;
    className: string;
    style?: CSSProperties;
    children?: React__default.ReactNode;
    onClick: (e: React__default.MouseEvent | ITouchEvent) => void;
    onChoose: (item: List, index: number) => void;
}
declare const Popover: FunctionComponent<Partial<PopoverProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface PriceProps {
    price: number | string;
    needSymbol: boolean;
    symbol: string;
    decimalDigits: number;
    thousands: boolean;
    position: string;
    size: string;
    className: string;
    style: React__default.CSSProperties;
}
declare const Price: FunctionComponent<Partial<PriceProps>>;

type ProgressSize = 'small' | 'base' | 'large';
type TextType = 'icon' | 'text';
interface ProgressProps extends BasicComponent {
    className: string;
    style: CSSProperties;
    isShowPercentage: boolean;
    percentage: number;
    fillColor: string;
    strokeColor: string;
    strokeWidth: string;
    size: ProgressSize;
    textColor: string;
    textWidth: string;
    showText: boolean;
    textInside: boolean;
    textBackground: string;
    textType: TextType;
    status: boolean;
    iconName: string;
    iconColor: string;
    iconSize: string;
    children: ReactNode;
}
declare const Progress: FunctionComponent<Partial<ProgressProps> & React__default.HTMLAttributes<HTMLDivElement>>;

type avatarShape = 'round' | 'square';
interface SkeletonProps {
    width: string;
    height: string;
    animated: boolean;
    row: number;
    title: boolean;
    avatar: boolean;
    className?: string;
    style?: React__default.CSSProperties;
    avatarSize: string;
    round: boolean;
    loading: boolean;
    avatarShape: avatarShape;
    children?: React__default.ReactNode;
}
declare const Skeleton: FunctionComponent<Partial<SkeletonProps>>;

interface StepProps extends BasicComponent {
    title: string;
    content: string;
    activeIndex: number;
    icon: string;
    iconColor: string;
    size: string;
    className: string;
    style: React__default.CSSProperties;
    renderContent: () => React__default.ReactNode;
}
declare const Step: FunctionComponent<Partial<StepProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface StepsProps {
    current: number;
    direction: string;
    progressDot: boolean;
    className: string;
    style: React__default.CSSProperties;
    clickStep: (index: number) => void;
    onClickStep: (index: number) => void;
}
declare const Steps: FunctionComponent<Partial<StepsProps> & React__default.HTMLAttributes<HTMLDivElement>>;

type SwiperRef = {
    to: (index: number) => void;
    next: () => void;
    prev: () => void;
};
interface SwiperProps {
    width: number | string;
    height: number | string;
    duration: number | string;
    initPage: number | string;
    autoPlay: number | string;
    direction: 'horizontal' | 'vertical';
    paginationColor: string;
    paginationBgColor: string;
    paginationVisible: boolean;
    loop: boolean;
    touchable: boolean;
    isPreventDefault: boolean;
    isStopPropagation: boolean;
    isCenter: boolean;
    className?: string;
    style?: React__default.CSSProperties;
    pageContent?: React__default.ReactNode;
    onChange?: (currPage: number) => void;
}
declare const Swiper: React__default.ForwardRefExoticComponent<Partial<SwiperProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, "onChange"> & React__default.RefAttributes<SwiperRef>>;

interface SwiperItemProps {
    direction?: string;
    size?: 0;
}
declare const SwiperItem: React__default.ForwardRefExoticComponent<Partial<SwiperItemProps> & React__default.HTMLAttributes<HTMLDivElement> & React__default.RefAttributes<HTMLDivElement>>;

interface BasicTableProps extends BasicComponent {
    className: string;
    style: React__default.CSSProperties;
    columns: Array<TableColumnProps>;
    data: Array<any>;
    bordered: boolean;
    summary?: React__default.ReactNode;
    striped?: boolean;
    noData?: React__default.ReactNode;
    onSorter?: (item: TableColumnProps, data: Array<any>) => void;
    showHeader?: boolean;
}
interface TableColumnProps {
    key: string;
    title?: string;
    align?: string;
    sorter?: ((a: any, b: any) => number) | boolean | string;
    render?: (rowData?: any, rowIndex?: number) => string | React__default.ReactNode;
}

type TableProps = BasicTableProps;
declare const Table: FunctionComponent<Partial<TableProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface TagProps extends BasicComponent {
    type: TagType;
    color: string;
    textColor: string;
    plain: boolean;
    round: boolean;
    mark: boolean;
    closeable: boolean;
    iconSize?: string | number;
    prefixCls: string;
    onClick: (e: MouseEvent) => void;
    onClose: (e?: any) => void;
    children?: React__default.ReactNode;
}
type TagType = 'default' | 'primary' | 'success' | 'warning' | 'danger';
declare const Tag: FunctionComponent<Partial<TagProps>>;

interface TrendArrowProps {
    rate: number;
    digits: number;
    showSign: boolean;
    showZero: boolean;
    arrowLeft: boolean;
    syncTextColor: boolean;
    textColor: string;
    riseColor: string;
    dropColor: string;
    iconSize: string;
    upIconName: string;
    downIconName: string;
    className: string;
    style: React__default.CSSProperties;
}
declare const TrendArrow: FunctionComponent<Partial<TrendArrowProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface VideoProps$1 {
    source: {
        type: string;
        src: string;
    };
    options: {
        controls?: boolean;
        muted?: boolean;
        autoplay?: boolean;
        poster?: string;
        playsinline?: boolean;
        loop?: boolean;
    };
    className: string;
    style: React__default.CSSProperties;
    play: (e: HTMLVideoElement) => void;
    pause: (e: HTMLVideoElement) => void;
    playend: (e: HTMLVideoElement) => void;
    onPlayFuc: (e: HTMLVideoElement) => void;
    onPauseFuc: (e: HTMLVideoElement) => void;
    onPlayend: (e: HTMLVideoElement) => void;
}
declare const Video: FunctionComponent<Partial<VideoProps$1> & React__default.HTMLAttributes<HTMLDivElement>>;

type VirtualListProps = {
    className?: string | any;
    style?: React__default.CSSProperties;
    sourceData: any;
    containerSize?: number;
    ItemRender?: any;
    itemEqualSize?: boolean;
    itemSize?: number;
    overscan?: number;
    onScroll?: (...args: any[]) => any;
    key?: any;
    locale?: any;
};
declare const VirtualList: FunctionComponent<VirtualListProps & React__default.HTMLAttributes<HTMLDivElement>>;

interface WaterMarkProps {
    content: string;
    fullPage: boolean;
    zIndex: number;
    className: string;
    gapX: number;
    gapY: number;
    width: number;
    height: number;
    image: string;
    imageWidth: number;
    imageHeight: number;
    rotate: number;
    fontColor: string;
    fontStyle: string;
    fontFamily: string;
    fontWeight: string;
    fontSize: string | number;
    style: React__default.CSSProperties;
}
declare const WaterMark: FunctionComponent<Partial<WaterMarkProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface RegionData {
    name?: string;
    [key: string]: any;
}
interface ChangeCallBack {
    next: string;
    value: string | RegionData;
    custom: string;
}
interface CloseCallBackData extends SelectedRegionObj {
    addressIdStr: string;
    addressStr: string;
}
interface CloseCallBack {
    data: CloseCallBackData | AddressList;
    type: string;
}
interface AddressList {
    id?: string | number;
    provinceName: string;
    cityName: string;
    countyName: string;
    townName: string;
    addressDetail: string;
    selectedAddress: boolean;
    name?: string;
    phone?: string;
}
interface SelectedRegionObj {
    province: RegionData;
    city: RegionData;
    country: RegionData;
    town: RegionData;
}

interface AddressProps extends BasicComponent {
    className?: string;
    style?: CSSProperties;
    modelValue: boolean;
    modelSelect: (string | number)[];
    type: string;
    customAddressTitle: string;
    province: RegionData[];
    city: RegionData[];
    country: RegionData[];
    town: RegionData[];
    isShowCustomAddress: boolean;
    existAddress: AddressList[];
    existAddressTitle: string;
    customAndExistTitle: string;
    height: string | number;
    defaultIcon: string;
    selectedIcon: string;
    closeBtnIcon: string;
    backBtnIcon: string;
    onSelected?: (prevExistAdd: AddressList, item: AddressList, copyExistAdd: AddressList[]) => void;
    onClose?: (cal: CloseCallBack) => void;
    closeMask?: (cal: {
        closeWay: string;
    }) => void;
    switchModule?: (cal: {
        type: string;
    }) => void;
    onChange?: (cal: ChangeCallBack) => void;
    onTabChecked?: (cal: string) => void;
}
declare const Address: FunctionComponent<Partial<AddressProps> & Omit<React__default.HTMLAttributes<HTMLDivElement>, 'onChange'>>;

interface BarrageProps {
    className: string;
    style: React__default.CSSProperties;
    barrageList: Array<string>;
    frequency: number;
    loop: boolean;
    speeds: number;
    rows: number;
    top: number;
}
declare const Barrage: React__default.ForwardRefExoticComponent<Partial<BarrageProps> & React__default.RefAttributes<unknown>>;

interface CardProps {
    imgUrl: string;
    title: string;
    price: string;
    vipPrice: string;
    shopDesc: string;
    delivery: string;
    shopName: string;
    className: string;
    style: React__default.CSSProperties;
    prolistTpl: React__default.ReactNode;
    shopTagTpl: React__default.ReactNode;
    originTpl: React__default.ReactNode;
    footerTpl: React__default.ReactNode;
}
declare const Card: FunctionComponent<Partial<CardProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface FileType {
    /** jpg 图片 */
    jpg: any;
    /** png 图片 */
    png: any;
}
interface SignatureProps {
    canvasId: string;
    type: keyof FileType;
    lineWidth: number;
    strokeStyle: string;
    unSupportTpl: string;
    className: string;
    confirm?: (dataurl: string) => void;
    clear?: () => void;
    onConfirm?: (dataurl: string) => void;
    onClear?: () => void;
}
declare const Signature: FunctionComponent<Partial<SignatureProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface TimeType {
    key?: string | number;
    list: string[];
}
interface TimeDetailProps {
    className?: string;
    currentKey: string | number;
    currentTime: TimeType[];
    times: TimeType[];
    select: (time: string) => void;
}
declare const TimeDetail: FunctionComponent<Partial<TimeDetailProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface TimePannelProps {
    date: string;
    curKey: string | number;
    className?: string;
    change: (curKey: string | number) => void;
}
declare const TimePannel: FunctionComponent<Partial<TimePannelProps> & React__default.HTMLAttributes<HTMLDivElement>>;

interface DateType {
    'pannel-key'?: string | number;
    date: string;
}
interface TimeSelectProps {
    className?: string;
    style: React__default.CSSProperties;
    visible?: boolean;
    height?: string;
    multiple?: boolean;
    title?: string;
    currentKey: string | number;
    currentTime: TimeType[];
    dates: DateType[];
    times: TimeType[];
    select?: (selectTimeData: TimeType[]) => void;
    pannelChange?: (pannelKey: string | number, selectTimeData: TimeType[]) => void;
    timeChange?: (time: string, selectTimeData: TimeType[]) => void;
    onSelect?: (selectTimeData: TimeType[]) => void;
    onPannelChange?: (pannelKey: string | number, selectTimeData: TimeType[]) => void;
    onTimeChange?: (time: string, selectTimeData: TimeType[]) => void;
}
declare const TimeSelect: FunctionComponent<Partial<TimeSelectProps>>;

interface CollapseItemProps extends BasicComponent {
    title: string;
    name: string;
    isOpen: boolean;
    icon: string;
    iconSize: string;
    iconColor: string;
    disabled: boolean;
    rotate: number;
    subTitle: string;
    titleIcon: string;
    titleIconColor: string;
    titleIconPosition: string;
    titleIconSize: string;
    onToggle: (isOpen: boolean, name: string) => void;
}

interface VideoProps {
    source: {
        type: string;
        src: string;
    };
    options: {
        controls?: boolean;
        muted?: boolean;
        autoplay?: boolean;
        poster?: string;
        playsinline?: boolean;
        loop?: boolean;
    };
    className: string;
    style: React__default.CSSProperties;
    play: (e: HTMLVideoElement) => void;
    pause: (e: HTMLVideoElement) => void;
    playend: (e: HTMLVideoElement) => void;
    onPlayFuc: (e: HTMLVideoElement) => void;
    onPauseFuc: (e: HTMLVideoElement) => void;
    onPlayend: (e: HTMLVideoElement) => void;
}

export { ActionSheet, ActionSheetProps, Address, AddressProps, Animate, AnimateProps, AnimatingNumbers, AnimatingNumbersProps, Audio, AudioProps, Avatar, AvatarGroup, AvatarGroupProps, AvatarProps, BackTop, BackTopProps, Badge, BadgeProps, Barrage, BarrageProps, Button, ButtonProps, Calendar, CalendarItem, CalendarItemProps, CalendarProps, Card, CardProps, Cascader, CascaderProps, Cell, CellGroup, CellGroupProps, CellProps, Checkbox, CheckboxGroup, CheckboxGroupProps, CheckboxProps, CircleProgress, CircleProgressProps, Col, ColProps, Collapse, CollapseItem, CollapseItemProps, CollapseProps, ConfigProvider, ConfigProviderProps, CountDown, CountDownProps, DatePicker, DatePickerProps, BaseDialog as Dialog, DialogProps, Divider, DividerProps, Drag, DragProps, Elevator, ElevatorProps, Ellipsis, EllipsisProps, Empty, EmptyProps, FixedNav, FixedNavProps, Form, FormItem, FormItemProps, FormProps, Grid, GridItem, GridItemProps, GridProps, Icon, IconProps, Image, ImagePreview, ImagePreviewProps, ImageProps, Indicator, IndicatorProps, Infiniteloading, InfiniteloadingProps, Input, InputNumber, InputNumberProps, InputProps, Layout, LayoutProps, Menu, MenuItem, MenuItemProps, MenuProps, NavBar, NavBarProps$1 as NavBarProps, NoticeBar, NoticeBarProps, Notify, NotifyProps, NumberKeyboard, NumberKeyboardProps, Overlay, OverlayProps, Pagination, PaginationProps, Picker, PickerProps, Popover, PopoverProps, Popup, PopupProps, Price, PriceProps, Progress, ProgressProps, PullToRefresh, PullToRefreshProps, Radio, RadioGroup, RadioGroupProps, RadioProps, Range, RangeProps, Rate, RateProps, Row, RowProps, SearchBar, SearchBarProps, ShortPassword, ShortPasswordProps, SideNavBar, SideNavBarItem, SideNavBarItemProps, SideNavBarProps, Signature, SignatureProps, Skeleton, SkeletonProps, Step, StepProps, Steps, StepsProps, Sticky, StickyProps, SubSideNavBar, SubSideNavBarProps, Swipe, SwipeProps, Swiper, SwiperItem, SwiperItemProps, SwiperProps, Switch, SwitchProps, TabPane, TabPaneProps, Tabbar, TabbarItem, TabbarItemProps, TabbarProps, Table, TableProps, Tabs, TabsProps, Tag, TagProps, TextArea, TextAreaProps, TimeDetail, TimeDetailProps, TimePannel, TimePannelProps, TimeSelect, TimeSelectProps, Toast, ToastProps, TrendArrow, TrendArrowProps, Uploader, UploaderProps, Video, VideoProps, VirtualList, VirtualListProps, WaterMark, WaterMarkProps };
